package internal

import (
	"bytes"
	"container/heap"
	"container/list"
	"container/ring"
	"crypto/cipher"
	"crypto/des"
	"crypto/md5"
	"crypto/sha1"
	"crypto/tls"
	"encoding/base64"
	"encoding/binary"
	"encoding/hex"
	"encoding/json"
	"encoding/xml"
	"errors"
	"fmt"
	"go/ast"
	"go/format"
	"go/importer"
	"go/token"
	"go/types"
	"html"
	"html/template"
	"io"
	"io/ioutil"
	"math"
	"math/rand"
	"mime/multipart"
	"net/http"
	"net/url"
	"path"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"sync/atomic"
	"time"
	"unicode"
	"unicode/utf16"
	"unicode/utf8"

	"github.com/goccy/go-reflect"
)

var importPkgs = map[string][]string{
	"bytes":           []string{},
	"container/heap":  []string{},
	"container/list":  []string{},
	"container/ring":  []string{},
	"crypto/md5":      []string{},
	"encoding/base64": []string{},
	"encoding/hex":    []string{},
	"encoding/xml":    []string{},
	"errors":          []string{},
	"fmt":             []string{},
	"html":            []string{},
	"math":            []string{},
	"math/rand":       []string{},
	"net/http":        []string{},
	"net/url":         []string{},
	"regexp":          []string{},
	"sort":            []string{},
	"strconv":         []string{},
	"strings":         []string{},
	"time":            []string{},
	"unicode":         []string{},
	"unicode/utf8":    []string{},
	"unicode/utf16":   []string{},
	"sync":            []string{},
	"sync/atomic":     []string{},
	"crypto/sha1":     []string{},
	"encoding/json":   []string{},
	"encoding/binary": []string{},
	"io/ioutil":       []string{"io"},
	"io":              []string{},
	"html/template":   []string{},
	"path":            []string{},
	"mime/multipart":  []string{},
	"crypto/des":      []string{},
	"crypto/cipher":   []string{},
	"crypto/tls":      []string{},
}

const importNew = false

func init() {
	if importNew {
		packageImport()
	}
	AddPackage("strings", "strings",
		NewType("Builder", reflect.TypeOf(func(strings.Builder) {}).In(0), ""),
		NewFunction("Clone", strings.Clone, ""),
		NewFunction("Compare", strings.Compare, ""),
		NewFunction("Contains", strings.Contains, ""),
		NewFunction("ContainsAny", strings.ContainsAny, ""),
		NewFunction("ContainsRune", strings.ContainsRune, ""),
		NewFunction("Count", strings.Count, ""),
		NewFunction("Cut", strings.Cut, ""),
		NewFunction("EqualFold", strings.EqualFold, ""),
		NewFunction("Fields", strings.Fields, ""),
		NewFunction("FieldsFunc", strings.FieldsFunc, ""),
		NewFunction("HasPrefix", strings.HasPrefix, ""),
		NewFunction("HasSuffix", strings.HasSuffix, ""),
		NewFunction("Index", strings.Index, ""),
		NewFunction("IndexAny", strings.IndexAny, ""),
		NewFunction("IndexByte", strings.IndexByte, ""),
		NewFunction("IndexFunc", strings.IndexFunc, ""),
		NewFunction("IndexRune", strings.IndexRune, ""),
		NewFunction("Join", strings.Join, ""),
		NewFunction("LastIndex", strings.LastIndex, ""),
		NewFunction("LastIndexAny", strings.LastIndexAny, ""),
		NewFunction("LastIndexByte", strings.LastIndexByte, ""),
		NewFunction("LastIndexFunc", strings.LastIndexFunc, ""),
		NewFunction("Map", strings.Map, ""),
		NewFunction("NewReader", strings.NewReader, ""),
		NewFunction("NewReplacer", strings.NewReplacer, ""),
		NewType("Reader", reflect.TypeOf(func(strings.Reader) {}).In(0), ""),
		NewFunction("Repeat", strings.Repeat, ""),
		NewFunction("Replace", strings.Replace, ""),
		NewFunction("ReplaceAll", strings.ReplaceAll, ""),
		NewType("Replacer", reflect.TypeOf(func(strings.Replacer) {}).In(0), ""),
		NewFunction("Split", strings.Split, ""),
		NewFunction("SplitAfter", strings.SplitAfter, ""),
		NewFunction("SplitAfterN", strings.SplitAfterN, ""),
		NewFunction("SplitN", strings.SplitN, ""),
		NewFunction("Title", strings.Title, ""),
		NewFunction("ToLower", strings.ToLower, ""),
		NewFunction("ToLowerSpecial", strings.ToLowerSpecial, ""),
		NewFunction("ToTitle", strings.ToTitle, ""),
		NewFunction("ToTitleSpecial", strings.ToTitleSpecial, ""),
		NewFunction("ToUpper", strings.ToUpper, ""),
		NewFunction("ToUpperSpecial", strings.ToUpperSpecial, ""),
		NewFunction("ToValidUTF8", strings.ToValidUTF8, ""),
		NewFunction("Trim", strings.Trim, ""),
		NewFunction("TrimFunc", strings.TrimFunc, ""),
		NewFunction("TrimLeft", strings.TrimLeft, ""),
		NewFunction("TrimLeftFunc", strings.TrimLeftFunc, ""),
		NewFunction("TrimPrefix", strings.TrimPrefix, ""),
		NewFunction("TrimRight", strings.TrimRight, ""),
		NewFunction("TrimRightFunc", strings.TrimRightFunc, ""),
		NewFunction("TrimSpace", strings.TrimSpace, ""),
		NewFunction("TrimSuffix", strings.TrimSuffix, ""),
	)
	AddPackage("fmt", "fmt",
		NewFunction("Errorf", fmt.Errorf, ""),
		NewType("Formatter", reflect.TypeOf(func(fmt.Formatter) {}).In(0), ""),
		NewFunction("Fprint", fmt.Fprint, ""),
		NewFunction("Fprintf", fmt.Fprintf, ""),
		NewFunction("Fprintln", fmt.Fprintln, ""),
		NewFunction("Fscan", fmt.Fscan, ""),
		NewFunction("Fscanf", fmt.Fscanf, ""),
		NewFunction("Fscanln", fmt.Fscanln, ""),
		NewType("GoStringer", reflect.TypeOf(func(fmt.GoStringer) {}).In(0), ""),
		NewFunction("Print", fmt.Print, ""),
		NewFunction("Printf", fmt.Printf, ""),
		NewFunction("Println", fmt.Println, ""),
		NewFunction("Scan", fmt.Scan, ""),
		NewType("ScanState", reflect.TypeOf(func(fmt.ScanState) {}).In(0), ""),
		NewFunction("Scanf", fmt.Scanf, ""),
		NewFunction("Scanln", fmt.Scanln, ""),
		NewType("Scanner", reflect.TypeOf(func(fmt.Scanner) {}).In(0), ""),
		NewFunction("Sprint", fmt.Sprint, ""),
		NewFunction("Sprintf", fmt.Sprintf, ""),
		NewFunction("Sprintln", fmt.Sprintln, ""),
		NewFunction("Sscan", fmt.Sscan, ""),
		NewFunction("Sscanf", fmt.Sscanf, ""),
		NewFunction("Sscanln", fmt.Sscanln, ""),
		NewType("State", reflect.TypeOf(func(fmt.State) {}).In(0), ""),
		NewType("Stringer", reflect.TypeOf(func(fmt.Stringer) {}).In(0), ""),
	)
	AddPackage("encoding/binary", "binary",
		NewVar("BigEndian", &binary.BigEndian, reflect.TypeOf(binary.BigEndian), ""),
		NewType("ByteOrder", reflect.TypeOf(func(binary.ByteOrder) {}).In(0), ""),
		NewVar("LittleEndian", &binary.LittleEndian, reflect.TypeOf(binary.LittleEndian), ""),
		NewConst("MaxVarintLen16", binary.MaxVarintLen16, ""),
		NewConst("MaxVarintLen32", binary.MaxVarintLen32, ""),
		NewConst("MaxVarintLen64", binary.MaxVarintLen64, ""),
		NewFunction("PutUvarint", binary.PutUvarint, ""),
		NewFunction("PutVarint", binary.PutVarint, ""),
		NewFunction("Read", binary.Read, ""),
		NewFunction("ReadUvarint", binary.ReadUvarint, ""),
		NewFunction("ReadVarint", binary.ReadVarint, ""),
		NewFunction("Size", binary.Size, ""),
		NewFunction("Uvarint", binary.Uvarint, ""),
		NewFunction("Varint", binary.Varint, ""),
		NewFunction("Write", binary.Write, ""),
	)
	AddPackage("path", "path",
		NewFunction("Base", path.Base, ""),
		NewFunction("Clean", path.Clean, ""),
		NewFunction("Dir", path.Dir, ""),
		NewVar("ErrBadPattern", &path.ErrBadPattern, reflect.TypeOf(func(error) {}).In(0), ""),
		NewFunction("Ext", path.Ext, ""),
		NewFunction("IsAbs", path.IsAbs, ""),
		NewFunction("Join", path.Join, ""),
		NewFunction("Match", path.Match, ""),
		NewFunction("Split", path.Split, ""),
	)
	AddPackage("mime/multipart", "multipart",
		NewVar("ErrMessageTooLarge", &multipart.ErrMessageTooLarge, reflect.TypeOf(func(error) {}).In(0), ""),
		NewType("File", reflect.TypeOf(func(multipart.File) {}).In(0), ""),
		NewType("FileHeader", reflect.TypeOf(func(multipart.FileHeader) {}).In(0), ""),
		NewType("Form", reflect.TypeOf(func(multipart.Form) {}).In(0), ""),
		NewFunction("NewReader", multipart.NewReader, ""),
		NewFunction("NewWriter", multipart.NewWriter, ""),
		NewType("Part", reflect.TypeOf(func(multipart.Part) {}).In(0), ""),
		NewType("Reader", reflect.TypeOf(func(multipart.Reader) {}).In(0), ""),
		NewType("Writer", reflect.TypeOf(func(multipart.Writer) {}).In(0), ""),
	)
	AddPackage("encoding/hex", "hex",
		NewFunction("Decode", hex.Decode, ""),
		NewFunction("DecodeString", hex.DecodeString, ""),
		NewFunction("DecodedLen", hex.DecodedLen, ""),
		NewFunction("Dump", hex.Dump, ""),
		NewFunction("Dumper", hex.Dumper, ""),
		NewFunction("Encode", hex.Encode, ""),
		NewFunction("EncodeToString", hex.EncodeToString, ""),
		NewFunction("EncodedLen", hex.EncodedLen, ""),
		NewVar("ErrLength", &hex.ErrLength, reflect.TypeOf(func(error) {}).In(0), ""),
		NewType("InvalidByteError", reflect.TypeOf(func(hex.InvalidByteError) {}).In(0), ""),
		NewFunction("NewDecoder", hex.NewDecoder, ""),
		NewFunction("NewEncoder", hex.NewEncoder, ""),
	)
	AddPackage("errors", "errors",
		NewFunction("As", errors.As, ""),
		NewFunction("Is", errors.Is, ""),
		NewFunction("New", errors.New, ""),
		NewFunction("Unwrap", errors.Unwrap, ""),
	)
	AddPackage("net/http", "http",
		NewFunction("AllowQuerySemicolons", http.AllowQuerySemicolons, ""),
		NewFunction("CanonicalHeaderKey", http.CanonicalHeaderKey, ""),
		NewType("Client", reflect.TypeOf(func(http.Client) {}).In(0), ""),
		NewType("CloseNotifier", reflect.TypeOf(func(http.CloseNotifier) {}).In(0), ""),
		NewType("ConnState", reflect.TypeOf(func(http.ConnState) {}).In(0), ""),
		NewType("Cookie", reflect.TypeOf(func(http.Cookie) {}).In(0), ""),
		NewType("CookieJar", reflect.TypeOf(func(http.CookieJar) {}).In(0), ""),
		NewVar("DefaultClient", &http.DefaultClient, reflect.TypeOf(http.DefaultClient), ""),
		NewConst("DefaultMaxHeaderBytes", http.DefaultMaxHeaderBytes, ""),
		NewConst("DefaultMaxIdleConnsPerHost", http.DefaultMaxIdleConnsPerHost, ""),
		NewVar("DefaultServeMux", &http.DefaultServeMux, reflect.TypeOf(http.DefaultServeMux), ""),
		NewVar("DefaultTransport", &http.DefaultTransport, reflect.TypeOf(func(http.RoundTripper) {}).In(0), ""),
		NewFunction("DetectContentType", http.DetectContentType, ""),
		NewType("Dir", reflect.TypeOf(func(http.Dir) {}).In(0), ""),
		NewVar("ErrAbortHandler", &http.ErrAbortHandler, reflect.TypeOf(func(error) {}).In(0), ""),
		NewVar("ErrBodyNotAllowed", &http.ErrBodyNotAllowed, reflect.TypeOf(func(error) {}).In(0), ""),
		NewVar("ErrBodyReadAfterClose", &http.ErrBodyReadAfterClose, reflect.TypeOf(func(error) {}).In(0), ""),
		NewVar("ErrContentLength", &http.ErrContentLength, reflect.TypeOf(func(error) {}).In(0), ""),
		NewVar("ErrHandlerTimeout", &http.ErrHandlerTimeout, reflect.TypeOf(func(error) {}).In(0), ""),
		NewVar("ErrHeaderTooLong", &http.ErrHeaderTooLong, reflect.TypeOf(http.ErrHeaderTooLong), ""),
		NewVar("ErrHijacked", &http.ErrHijacked, reflect.TypeOf(func(error) {}).In(0), ""),
		NewVar("ErrLineTooLong", &http.ErrLineTooLong, reflect.TypeOf(func(error) {}).In(0), ""),
		NewVar("ErrMissingBoundary", &http.ErrMissingBoundary, reflect.TypeOf(http.ErrMissingBoundary), ""),
		NewVar("ErrMissingContentLength", &http.ErrMissingContentLength, reflect.TypeOf(http.ErrMissingContentLength), ""),
		NewVar("ErrMissingFile", &http.ErrMissingFile, reflect.TypeOf(func(error) {}).In(0), ""),
		NewVar("ErrNoCookie", &http.ErrNoCookie, reflect.TypeOf(func(error) {}).In(0), ""),
		NewVar("ErrNoLocation", &http.ErrNoLocation, reflect.TypeOf(func(error) {}).In(0), ""),
		NewVar("ErrNotMultipart", &http.ErrNotMultipart, reflect.TypeOf(http.ErrNotMultipart), ""),
		NewVar("ErrNotSupported", &http.ErrNotSupported, reflect.TypeOf(http.ErrNotSupported), ""),
		NewVar("ErrServerClosed", &http.ErrServerClosed, reflect.TypeOf(func(error) {}).In(0), ""),
		NewVar("ErrShortBody", &http.ErrShortBody, reflect.TypeOf(http.ErrShortBody), ""),
		NewVar("ErrSkipAltProtocol", &http.ErrSkipAltProtocol, reflect.TypeOf(func(error) {}).In(0), ""),
		NewVar("ErrUnexpectedTrailer", &http.ErrUnexpectedTrailer, reflect.TypeOf(http.ErrUnexpectedTrailer), ""),
		NewVar("ErrUseLastResponse", &http.ErrUseLastResponse, reflect.TypeOf(func(error) {}).In(0), ""),
		NewVar("ErrWriteAfterFlush", &http.ErrWriteAfterFlush, reflect.TypeOf(func(error) {}).In(0), ""),
		NewFunction("Error", http.Error, ""),
		NewFunction("FS", http.FS, ""),
		NewType("File", reflect.TypeOf(func(http.File) {}).In(0), ""),
		NewFunction("FileServer", http.FileServer, ""),
		NewType("FileSystem", reflect.TypeOf(func(http.FileSystem) {}).In(0), ""),
		NewType("Flusher", reflect.TypeOf(func(http.Flusher) {}).In(0), ""),
		NewFunction("Get", http.Get, ""),
		NewFunction("Handle", http.Handle, ""),
		NewFunction("HandleFunc", http.HandleFunc, ""),
		NewType("Handler", reflect.TypeOf(func(http.Handler) {}).In(0), ""),
		NewType("HandlerFunc", reflect.TypeOf(func(http.HandlerFunc) {}).In(0), ""),
		NewFunction("Head", http.Head, ""),
		NewType("Header", reflect.TypeOf(func(http.Header) {}).In(0), ""),
		NewType("Hijacker", reflect.TypeOf(func(http.Hijacker) {}).In(0), ""),
		NewFunction("ListenAndServe", http.ListenAndServe, ""),
		NewFunction("ListenAndServeTLS", http.ListenAndServeTLS, ""),
		NewVar("LocalAddrContextKey", &http.LocalAddrContextKey, reflect.TypeOf(http.LocalAddrContextKey), ""),
		NewFunction("MaxBytesHandler", http.MaxBytesHandler, ""),
		NewFunction("MaxBytesReader", http.MaxBytesReader, ""),
		NewConst("MethodConnect", http.MethodConnect, ""),
		NewConst("MethodDelete", http.MethodDelete, ""),
		NewConst("MethodGet", http.MethodGet, ""),
		NewConst("MethodHead", http.MethodHead, ""),
		NewConst("MethodOptions", http.MethodOptions, ""),
		NewConst("MethodPatch", http.MethodPatch, ""),
		NewConst("MethodPost", http.MethodPost, ""),
		NewConst("MethodPut", http.MethodPut, ""),
		NewConst("MethodTrace", http.MethodTrace, ""),
		NewFunction("NewFileTransport", http.NewFileTransport, ""),
		NewFunction("NewRequest", http.NewRequest, ""),
		NewFunction("NewRequestWithContext", http.NewRequestWithContext, ""),
		NewFunction("NewServeMux", http.NewServeMux, ""),
		NewVar("NoBody", &http.NoBody, reflect.TypeOf(http.NoBody), ""),
		NewFunction("NotFound", http.NotFound, ""),
		NewFunction("NotFoundHandler", http.NotFoundHandler, ""),
		NewFunction("ParseHTTPVersion", http.ParseHTTPVersion, ""),
		NewFunction("ParseTime", http.ParseTime, ""),
		NewFunction("Post", http.Post, ""),
		NewFunction("PostForm", http.PostForm, ""),
		NewType("ProtocolError", reflect.TypeOf(func(http.ProtocolError) {}).In(0), ""),
		NewFunction("ProxyFromEnvironment", http.ProxyFromEnvironment, ""),
		NewFunction("ProxyURL", http.ProxyURL, ""),
		NewType("PushOptions", reflect.TypeOf(func(http.PushOptions) {}).In(0), ""),
		NewType("Pusher", reflect.TypeOf(func(http.Pusher) {}).In(0), ""),
		NewFunction("ReadRequest", http.ReadRequest, ""),
		NewFunction("ReadResponse", http.ReadResponse, ""),
		NewFunction("Redirect", http.Redirect, ""),
		NewFunction("RedirectHandler", http.RedirectHandler, ""),
		NewType("Request", reflect.TypeOf(func(http.Request) {}).In(0), ""),
		NewType("Response", reflect.TypeOf(func(http.Response) {}).In(0), ""),
		NewType("ResponseWriter", reflect.TypeOf(func(http.ResponseWriter) {}).In(0), ""),
		NewType("RoundTripper", reflect.TypeOf(func(http.RoundTripper) {}).In(0), ""),
		NewType("SameSite", reflect.TypeOf(func(http.SameSite) {}).In(0), ""),
		NewConst("SameSiteDefaultMode", http.SameSiteDefaultMode, ""),
		NewConst("SameSiteLaxMode", http.SameSiteLaxMode, ""),
		NewConst("SameSiteNoneMode", http.SameSiteNoneMode, ""),
		NewConst("SameSiteStrictMode", http.SameSiteStrictMode, ""),
		NewFunction("Serve", http.Serve, ""),
		NewFunction("ServeContent", http.ServeContent, ""),
		NewFunction("ServeFile", http.ServeFile, ""),
		NewType("ServeMux", reflect.TypeOf(func(http.ServeMux) {}).In(0), ""),
		NewFunction("ServeTLS", http.ServeTLS, ""),
		NewType("Server", reflect.TypeOf(func(http.Server) {}).In(0), ""),
		NewVar("ServerContextKey", &http.ServerContextKey, reflect.TypeOf(http.ServerContextKey), ""),
		NewFunction("SetCookie", http.SetCookie, ""),
		NewConst("StateActive", http.StateActive, ""),
		NewConst("StateClosed", http.StateClosed, ""),
		NewConst("StateHijacked", http.StateHijacked, ""),
		NewConst("StateIdle", http.StateIdle, ""),
		NewConst("StateNew", http.StateNew, ""),
		NewConst("StatusAccepted", http.StatusAccepted, ""),
		NewConst("StatusAlreadyReported", http.StatusAlreadyReported, ""),
		NewConst("StatusBadGateway", http.StatusBadGateway, ""),
		NewConst("StatusBadRequest", http.StatusBadRequest, ""),
		NewConst("StatusConflict", http.StatusConflict, ""),
		NewConst("StatusContinue", http.StatusContinue, ""),
		NewConst("StatusCreated", http.StatusCreated, ""),
		NewConst("StatusEarlyHints", http.StatusEarlyHints, ""),
		NewConst("StatusExpectationFailed", http.StatusExpectationFailed, ""),
		NewConst("StatusFailedDependency", http.StatusFailedDependency, ""),
		NewConst("StatusForbidden", http.StatusForbidden, ""),
		NewConst("StatusFound", http.StatusFound, ""),
		NewConst("StatusGatewayTimeout", http.StatusGatewayTimeout, ""),
		NewConst("StatusGone", http.StatusGone, ""),
		NewConst("StatusHTTPVersionNotSupported", http.StatusHTTPVersionNotSupported, ""),
		NewConst("StatusIMUsed", http.StatusIMUsed, ""),
		NewConst("StatusInsufficientStorage", http.StatusInsufficientStorage, ""),
		NewConst("StatusInternalServerError", http.StatusInternalServerError, ""),
		NewConst("StatusLengthRequired", http.StatusLengthRequired, ""),
		NewConst("StatusLocked", http.StatusLocked, ""),
		NewConst("StatusLoopDetected", http.StatusLoopDetected, ""),
		NewConst("StatusMethodNotAllowed", http.StatusMethodNotAllowed, ""),
		NewConst("StatusMisdirectedRequest", http.StatusMisdirectedRequest, ""),
		NewConst("StatusMovedPermanently", http.StatusMovedPermanently, ""),
		NewConst("StatusMultiStatus", http.StatusMultiStatus, ""),
		NewConst("StatusMultipleChoices", http.StatusMultipleChoices, ""),
		NewConst("StatusNetworkAuthenticationRequired", http.StatusNetworkAuthenticationRequired, ""),
		NewConst("StatusNoContent", http.StatusNoContent, ""),
		NewConst("StatusNonAuthoritativeInfo", http.StatusNonAuthoritativeInfo, ""),
		NewConst("StatusNotAcceptable", http.StatusNotAcceptable, ""),
		NewConst("StatusNotExtended", http.StatusNotExtended, ""),
		NewConst("StatusNotFound", http.StatusNotFound, ""),
		NewConst("StatusNotImplemented", http.StatusNotImplemented, ""),
		NewConst("StatusNotModified", http.StatusNotModified, ""),
		NewConst("StatusOK", http.StatusOK, ""),
		NewConst("StatusPartialContent", http.StatusPartialContent, ""),
		NewConst("StatusPaymentRequired", http.StatusPaymentRequired, ""),
		NewConst("StatusPermanentRedirect", http.StatusPermanentRedirect, ""),
		NewConst("StatusPreconditionFailed", http.StatusPreconditionFailed, ""),
		NewConst("StatusPreconditionRequired", http.StatusPreconditionRequired, ""),
		NewConst("StatusProcessing", http.StatusProcessing, ""),
		NewConst("StatusProxyAuthRequired", http.StatusProxyAuthRequired, ""),
		NewConst("StatusRequestEntityTooLarge", http.StatusRequestEntityTooLarge, ""),
		NewConst("StatusRequestHeaderFieldsTooLarge", http.StatusRequestHeaderFieldsTooLarge, ""),
		NewConst("StatusRequestTimeout", http.StatusRequestTimeout, ""),
		NewConst("StatusRequestURITooLong", http.StatusRequestURITooLong, ""),
		NewConst("StatusRequestedRangeNotSatisfiable", http.StatusRequestedRangeNotSatisfiable, ""),
		NewConst("StatusResetContent", http.StatusResetContent, ""),
		NewConst("StatusSeeOther", http.StatusSeeOther, ""),
		NewConst("StatusServiceUnavailable", http.StatusServiceUnavailable, ""),
		NewConst("StatusSwitchingProtocols", http.StatusSwitchingProtocols, ""),
		NewConst("StatusTeapot", http.StatusTeapot, ""),
		NewConst("StatusTemporaryRedirect", http.StatusTemporaryRedirect, ""),
		NewFunction("StatusText", http.StatusText, ""),
		NewConst("StatusTooEarly", http.StatusTooEarly, ""),
		NewConst("StatusTooManyRequests", http.StatusTooManyRequests, ""),
		NewConst("StatusUnauthorized", http.StatusUnauthorized, ""),
		NewConst("StatusUnavailableForLegalReasons", http.StatusUnavailableForLegalReasons, ""),
		NewConst("StatusUnprocessableEntity", http.StatusUnprocessableEntity, ""),
		NewConst("StatusUnsupportedMediaType", http.StatusUnsupportedMediaType, ""),
		NewConst("StatusUpgradeRequired", http.StatusUpgradeRequired, ""),
		NewConst("StatusUseProxy", http.StatusUseProxy, ""),
		NewConst("StatusVariantAlsoNegotiates", http.StatusVariantAlsoNegotiates, ""),
		NewFunction("StripPrefix", http.StripPrefix, ""),
		NewConst("TimeFormat", http.TimeFormat, ""),
		NewFunction("TimeoutHandler", http.TimeoutHandler, ""),
		NewConst("TrailerPrefix", http.TrailerPrefix, ""),
		NewType("Transport", reflect.TypeOf(func(http.Transport) {}).In(0), ""),
	)
	AddPackage("unicode/utf16", "utf16",
		NewFunction("Decode", utf16.Decode, ""),
		NewFunction("DecodeRune", utf16.DecodeRune, ""),
		NewFunction("Encode", utf16.Encode, ""),
		NewFunction("EncodeRune", utf16.EncodeRune, ""),
		NewFunction("IsSurrogate", utf16.IsSurrogate, ""),
	)
	AddPackage("encoding/json", "json",
		NewFunction("Compact", json.Compact, ""),
		NewType("Decoder", reflect.TypeOf(func(json.Decoder) {}).In(0), ""),
		NewType("Delim", reflect.TypeOf(func(json.Delim) {}).In(0), ""),
		NewType("Encoder", reflect.TypeOf(func(json.Encoder) {}).In(0), ""),
		NewFunction("HTMLEscape", json.HTMLEscape, ""),
		NewFunction("Indent", json.Indent, ""),
		NewType("InvalidUTF8Error", reflect.TypeOf(func(json.InvalidUTF8Error) {}).In(0), ""),
		NewType("InvalidUnmarshalError", reflect.TypeOf(func(json.InvalidUnmarshalError) {}).In(0), ""),
		NewFunction("Marshal", json.Marshal, ""),
		NewFunction("MarshalIndent", json.MarshalIndent, ""),
		NewType("Marshaler", reflect.TypeOf(func(json.Marshaler) {}).In(0), ""),
		NewType("MarshalerError", reflect.TypeOf(func(json.MarshalerError) {}).In(0), ""),
		NewFunction("NewDecoder", json.NewDecoder, ""),
		NewFunction("NewEncoder", json.NewEncoder, ""),
		NewType("Number", reflect.TypeOf(func(json.Number) {}).In(0), ""),
		NewType("RawMessage", reflect.TypeOf(func(json.RawMessage) {}).In(0), ""),
		NewType("SyntaxError", reflect.TypeOf(func(json.SyntaxError) {}).In(0), ""),
		NewType("Token", reflect.TypeOf(func(json.Token) {}).In(0), ""),
		NewFunction("Unmarshal", json.Unmarshal, ""),
		NewType("UnmarshalFieldError", reflect.TypeOf(func(json.UnmarshalFieldError) {}).In(0), ""),
		NewType("UnmarshalTypeError", reflect.TypeOf(func(json.UnmarshalTypeError) {}).In(0), ""),
		NewType("Unmarshaler", reflect.TypeOf(func(json.Unmarshaler) {}).In(0), ""),
		NewType("UnsupportedTypeError", reflect.TypeOf(func(json.UnsupportedTypeError) {}).In(0), ""),
		NewType("UnsupportedValueError", reflect.TypeOf(func(json.UnsupportedValueError) {}).In(0), ""),
		NewFunction("Valid", json.Valid, ""),
	)
	AddPackage("io/ioutil", "ioutil",
		NewVar("Discard", &ioutil.Discard, reflect.TypeOf(func(io.Writer) {}).In(0), ""),
		NewFunction("NopCloser", ioutil.NopCloser, ""),
		NewFunction("ReadAll", ioutil.ReadAll, ""),
		NewFunction("ReadDir", ioutil.ReadDir, ""),
		NewFunction("ReadFile", ioutil.ReadFile, ""),
		NewFunction("TempDir", ioutil.TempDir, ""),
		NewFunction("TempFile", ioutil.TempFile, ""),
		NewFunction("WriteFile", ioutil.WriteFile, ""),
	)
	AddPackage("crypto/des", "des",
		NewConst("BlockSize", des.BlockSize, ""),
		NewType("KeySizeError", reflect.TypeOf(func(des.KeySizeError) {}).In(0), ""),
		NewFunction("NewCipher", des.NewCipher, ""),
		NewFunction("NewTripleDESCipher", des.NewTripleDESCipher, ""),
	)
	AddPackage("encoding/base64", "base64",
		NewType("CorruptInputError", reflect.TypeOf(func(base64.CorruptInputError) {}).In(0), ""),
		NewType("Encoding", reflect.TypeOf(func(base64.Encoding) {}).In(0), ""),
		NewFunction("NewDecoder", base64.NewDecoder, ""),
		NewFunction("NewEncoder", base64.NewEncoder, ""),
		NewFunction("NewEncoding", base64.NewEncoding, ""),
		NewConst("NoPadding", base64.NoPadding, ""),
		NewVar("RawStdEncoding", &base64.RawStdEncoding, reflect.TypeOf(base64.RawStdEncoding), ""),
		NewVar("RawURLEncoding", &base64.RawURLEncoding, reflect.TypeOf(base64.RawURLEncoding), ""),
		NewVar("StdEncoding", &base64.StdEncoding, reflect.TypeOf(base64.StdEncoding), ""),
		NewConst("StdPadding", base64.StdPadding, ""),
		NewVar("URLEncoding", &base64.URLEncoding, reflect.TypeOf(base64.URLEncoding), ""),
	)
	AddPackage("math", "math",
		NewFunction("Abs", math.Abs, ""),
		NewFunction("Acos", math.Acos, ""),
		NewFunction("Acosh", math.Acosh, ""),
		NewFunction("Asin", math.Asin, ""),
		NewFunction("Asinh", math.Asinh, ""),
		NewFunction("Atan", math.Atan, ""),
		NewFunction("Atan2", math.Atan2, ""),
		NewFunction("Atanh", math.Atanh, ""),
		NewFunction("Cbrt", math.Cbrt, ""),
		NewFunction("Ceil", math.Ceil, ""),
		NewFunction("Copysign", math.Copysign, ""),
		NewFunction("Cos", math.Cos, ""),
		NewFunction("Cosh", math.Cosh, ""),
		NewFunction("Dim", math.Dim, ""),
		NewConst("E", math.E, ""),
		NewFunction("Erf", math.Erf, ""),
		NewFunction("Erfc", math.Erfc, ""),
		NewFunction("Erfcinv", math.Erfcinv, ""),
		NewFunction("Erfinv", math.Erfinv, ""),
		NewFunction("Exp", math.Exp, ""),
		NewFunction("Exp2", math.Exp2, ""),
		NewFunction("Expm1", math.Expm1, ""),
		NewFunction("FMA", math.FMA, ""),
		NewFunction("Float32bits", math.Float32bits, ""),
		NewFunction("Float32frombits", math.Float32frombits, ""),
		NewFunction("Float64bits", math.Float64bits, ""),
		NewFunction("Float64frombits", math.Float64frombits, ""),
		NewFunction("Floor", math.Floor, ""),
		NewFunction("Frexp", math.Frexp, ""),
		NewFunction("Gamma", math.Gamma, ""),
		NewFunction("Hypot", math.Hypot, ""),
		NewFunction("Ilogb", math.Ilogb, ""),
		NewFunction("Inf", math.Inf, ""),
		NewFunction("IsInf", math.IsInf, ""),
		NewFunction("IsNaN", math.IsNaN, ""),
		NewFunction("J0", math.J0, ""),
		NewFunction("J1", math.J1, ""),
		NewFunction("Jn", math.Jn, ""),
		NewFunction("Ldexp", math.Ldexp, ""),
		NewFunction("Lgamma", math.Lgamma, ""),
		NewConst("Ln10", math.Ln10, ""),
		NewConst("Ln2", math.Ln2, ""),
		NewFunction("Log", math.Log, ""),
		NewFunction("Log10", math.Log10, ""),
		NewConst("Log10E", math.Log10E, ""),
		NewFunction("Log1p", math.Log1p, ""),
		NewFunction("Log2", math.Log2, ""),
		NewConst("Log2E", math.Log2E, ""),
		NewFunction("Logb", math.Logb, ""),
		NewFunction("Max", math.Max, ""),
		NewConst("MaxFloat32", math.MaxFloat32, ""),
		NewConst("MaxFloat64", math.MaxFloat64, ""),
		NewConst("MaxInt", math.MaxInt, ""),
		NewConst("MaxInt16", math.MaxInt16, ""),
		NewConst("MaxInt32", math.MaxInt32, ""),
		NewConst("MaxInt64", math.MaxInt64, ""),
		NewConst("MaxInt8", math.MaxInt8, ""),
		NewConst("MaxUint16", math.MaxUint16, ""),
		NewConst("MaxUint32", math.MaxUint32, ""),
		NewConst("MaxUint64", uint(math.MaxUint64), ""),
		NewConst("MaxUint8", math.MaxUint8, ""),
		NewFunction("Min", math.Min, ""),
		NewConst("MinInt", math.MinInt, ""),
		NewConst("MinInt16", math.MinInt16, ""),
		NewConst("MinInt32", math.MinInt32, ""),
		NewConst("MinInt64", math.MinInt64, ""),
		NewConst("MinInt8", math.MinInt8, ""),
		NewFunction("Mod", math.Mod, ""),
		NewFunction("Modf", math.Modf, ""),
		NewFunction("NaN", math.NaN, ""),
		NewFunction("Nextafter", math.Nextafter, ""),
		NewFunction("Nextafter32", math.Nextafter32, ""),
		NewConst("Phi", math.Phi, ""),
		NewConst("Pi", math.Pi, ""),
		NewFunction("Pow", math.Pow, ""),
		NewFunction("Pow10", math.Pow10, ""),
		NewFunction("Remainder", math.Remainder, ""),
		NewFunction("Round", math.Round, ""),
		NewFunction("RoundToEven", math.RoundToEven, ""),
		NewFunction("Signbit", math.Signbit, ""),
		NewFunction("Sin", math.Sin, ""),
		NewFunction("Sincos", math.Sincos, ""),
		NewFunction("Sinh", math.Sinh, ""),
		NewConst("SmallestNonzeroFloat32", math.SmallestNonzeroFloat32, ""),
		NewConst("SmallestNonzeroFloat64", math.SmallestNonzeroFloat64, ""),
		NewFunction("Sqrt", math.Sqrt, ""),
		NewConst("Sqrt2", math.Sqrt2, ""),
		NewConst("SqrtE", math.SqrtE, ""),
		NewConst("SqrtPhi", math.SqrtPhi, ""),
		NewConst("SqrtPi", math.SqrtPi, ""),
		NewFunction("Tan", math.Tan, ""),
		NewFunction("Tanh", math.Tanh, ""),
		NewFunction("Trunc", math.Trunc, ""),
		NewFunction("Y0", math.Y0, ""),
		NewFunction("Y1", math.Y1, ""),
		NewFunction("Yn", math.Yn, ""),
	)
	AddPackage("io", "io",
		NewType("ByteReader", reflect.TypeOf(func(io.ByteReader) {}).In(0), ""),
		NewType("ByteScanner", reflect.TypeOf(func(io.ByteScanner) {}).In(0), ""),
		NewType("ByteWriter", reflect.TypeOf(func(io.ByteWriter) {}).In(0), ""),
		NewType("Closer", reflect.TypeOf(func(io.Closer) {}).In(0), ""),
		NewFunction("Copy", io.Copy, ""),
		NewFunction("CopyBuffer", io.CopyBuffer, ""),
		NewFunction("CopyN", io.CopyN, ""),
		NewVar("Discard", &io.Discard, reflect.TypeOf(func(io.Writer) {}).In(0), ""),
		NewVar("EOF", &io.EOF, reflect.TypeOf(func(error) {}).In(0), ""),
		NewVar("ErrClosedPipe", &io.ErrClosedPipe, reflect.TypeOf(func(error) {}).In(0), ""),
		NewVar("ErrNoProgress", &io.ErrNoProgress, reflect.TypeOf(func(error) {}).In(0), ""),
		NewVar("ErrShortBuffer", &io.ErrShortBuffer, reflect.TypeOf(func(error) {}).In(0), ""),
		NewVar("ErrShortWrite", &io.ErrShortWrite, reflect.TypeOf(func(error) {}).In(0), ""),
		NewVar("ErrUnexpectedEOF", &io.ErrUnexpectedEOF, reflect.TypeOf(func(error) {}).In(0), ""),
		NewFunction("LimitReader", io.LimitReader, ""),
		NewType("LimitedReader", reflect.TypeOf(func(io.LimitedReader) {}).In(0), ""),
		NewFunction("MultiReader", io.MultiReader, ""),
		NewFunction("MultiWriter", io.MultiWriter, ""),
		NewFunction("NewSectionReader", io.NewSectionReader, ""),
		NewFunction("NopCloser", io.NopCloser, ""),
		NewFunction("Pipe", io.Pipe, ""),
		NewType("PipeReader", reflect.TypeOf(func(io.PipeReader) {}).In(0), ""),
		NewType("PipeWriter", reflect.TypeOf(func(io.PipeWriter) {}).In(0), ""),
		NewFunction("ReadAll", io.ReadAll, ""),
		NewFunction("ReadAtLeast", io.ReadAtLeast, ""),
		NewType("ReadCloser", reflect.TypeOf(func(io.ReadCloser) {}).In(0), ""),
		NewFunction("ReadFull", io.ReadFull, ""),
		NewType("ReadSeekCloser", reflect.TypeOf(func(io.ReadSeekCloser) {}).In(0), ""),
		NewType("ReadSeeker", reflect.TypeOf(func(io.ReadSeeker) {}).In(0), ""),
		NewType("ReadWriteCloser", reflect.TypeOf(func(io.ReadWriteCloser) {}).In(0), ""),
		NewType("ReadWriteSeeker", reflect.TypeOf(func(io.ReadWriteSeeker) {}).In(0), ""),
		NewType("ReadWriter", reflect.TypeOf(func(io.ReadWriter) {}).In(0), ""),
		NewType("Reader", reflect.TypeOf(func(io.Reader) {}).In(0), ""),
		NewType("ReaderAt", reflect.TypeOf(func(io.ReaderAt) {}).In(0), ""),
		NewType("ReaderFrom", reflect.TypeOf(func(io.ReaderFrom) {}).In(0), ""),
		NewType("RuneReader", reflect.TypeOf(func(io.RuneReader) {}).In(0), ""),
		NewType("RuneScanner", reflect.TypeOf(func(io.RuneScanner) {}).In(0), ""),
		NewType("SectionReader", reflect.TypeOf(func(io.SectionReader) {}).In(0), ""),
		NewConst("SeekCurrent", io.SeekCurrent, ""),
		NewConst("SeekEnd", io.SeekEnd, ""),
		NewConst("SeekStart", io.SeekStart, ""),
		NewType("Seeker", reflect.TypeOf(func(io.Seeker) {}).In(0), ""),
		NewType("StringWriter", reflect.TypeOf(func(io.StringWriter) {}).In(0), ""),
		NewFunction("TeeReader", io.TeeReader, ""),
		NewType("WriteCloser", reflect.TypeOf(func(io.WriteCloser) {}).In(0), ""),
		NewType("WriteSeeker", reflect.TypeOf(func(io.WriteSeeker) {}).In(0), ""),
		NewFunction("WriteString", io.WriteString, ""),
		NewType("Writer", reflect.TypeOf(func(io.Writer) {}).In(0), ""),
		NewType("WriterAt", reflect.TypeOf(func(io.WriterAt) {}).In(0), ""),
		NewType("WriterTo", reflect.TypeOf(func(io.WriterTo) {}).In(0), ""),
	)
	AddPackage("net/url", "url",
		NewType("Error", reflect.TypeOf(func(url.Error) {}).In(0), ""),
		NewType("EscapeError", reflect.TypeOf(func(url.EscapeError) {}).In(0), ""),
		NewType("InvalidHostError", reflect.TypeOf(func(url.InvalidHostError) {}).In(0), ""),
		NewFunction("Parse", url.Parse, ""),
		NewFunction("ParseQuery", url.ParseQuery, ""),
		NewFunction("ParseRequestURI", url.ParseRequestURI, ""),
		NewFunction("PathEscape", url.PathEscape, ""),
		NewFunction("PathUnescape", url.PathUnescape, ""),
		NewFunction("QueryEscape", url.QueryEscape, ""),
		NewFunction("QueryUnescape", url.QueryUnescape, ""),
		NewType("URL", reflect.TypeOf(func(url.URL) {}).In(0), ""),
		NewFunction("User", url.User, ""),
		NewFunction("UserPassword", url.UserPassword, ""),
		NewType("Userinfo", reflect.TypeOf(func(url.Userinfo) {}).In(0), ""),
		NewType("Values", reflect.TypeOf(func(url.Values) {}).In(0), ""),
	)
	AddPackage("sort", "sort",
		NewType("Float64Slice", reflect.TypeOf(func(sort.Float64Slice) {}).In(0), ""),
		NewFunction("Float64s", sort.Float64s, ""),
		NewFunction("Float64sAreSorted", sort.Float64sAreSorted, ""),
		NewType("IntSlice", reflect.TypeOf(func(sort.IntSlice) {}).In(0), ""),
		NewType("Interface", reflect.TypeOf(func(sort.Interface) {}).In(0), ""),
		NewFunction("Ints", sort.Ints, ""),
		NewFunction("IntsAreSorted", sort.IntsAreSorted, ""),
		NewFunction("IsSorted", sort.IsSorted, ""),
		NewFunction("Reverse", sort.Reverse, ""),
		NewFunction("Search", sort.Search, ""),
		NewFunction("SearchFloat64s", sort.SearchFloat64s, ""),
		NewFunction("SearchInts", sort.SearchInts, ""),
		NewFunction("SearchStrings", sort.SearchStrings, ""),
		NewFunction("Slice", sort.Slice, ""),
		NewFunction("SliceIsSorted", sort.SliceIsSorted, ""),
		NewFunction("SliceStable", sort.SliceStable, ""),
		NewFunction("Sort", sort.Sort, ""),
		NewFunction("Stable", sort.Stable, ""),
		NewType("StringSlice", reflect.TypeOf(func(sort.StringSlice) {}).In(0), ""),
		NewFunction("Strings", sort.Strings, ""),
		NewFunction("StringsAreSorted", sort.StringsAreSorted, ""),
	)
	AddPackage("sync", "sync",
		NewType("Cond", reflect.TypeOf(func(sync.Cond) {}).In(0), ""),
		NewType("Locker", reflect.TypeOf(func(sync.Locker) {}).In(0), ""),
		NewType("Map", reflect.TypeOf(func(sync.Map) {}).In(0), ""),
		NewType("Mutex", reflect.TypeOf(func(sync.Mutex) {}).In(0), ""),
		NewFunction("NewCond", sync.NewCond, ""),
		NewType("Once", reflect.TypeOf(func(sync.Once) {}).In(0), ""),
		NewType("Pool", reflect.TypeOf(func(sync.Pool) {}).In(0), ""),
		NewType("RWMutex", reflect.TypeOf(func(sync.RWMutex) {}).In(0), ""),
		NewType("WaitGroup", reflect.TypeOf(func(sync.WaitGroup) {}).In(0), ""),
	)
	AddPackage("html/template", "template",
		NewType("CSS", reflect.TypeOf(func(template.CSS) {}).In(0), ""),
		NewConst("ErrAmbigContext", template.ErrAmbigContext, ""),
		NewConst("ErrBadHTML", template.ErrBadHTML, ""),
		NewConst("ErrBranchEnd", template.ErrBranchEnd, ""),
		NewConst("ErrEndContext", template.ErrEndContext, ""),
		NewConst("ErrNoSuchTemplate", template.ErrNoSuchTemplate, ""),
		NewConst("ErrOutputContext", template.ErrOutputContext, ""),
		NewConst("ErrPartialCharset", template.ErrPartialCharset, ""),
		NewConst("ErrPartialEscape", template.ErrPartialEscape, ""),
		NewConst("ErrPredefinedEscaper", template.ErrPredefinedEscaper, ""),
		NewConst("ErrRangeLoopReentry", template.ErrRangeLoopReentry, ""),
		NewConst("ErrSlashAmbig", template.ErrSlashAmbig, ""),
		NewType("Error", reflect.TypeOf(func(template.Error) {}).In(0), ""),
		NewType("ErrorCode", reflect.TypeOf(func(template.ErrorCode) {}).In(0), ""),
		NewType("FuncMap", reflect.TypeOf(func(template.FuncMap) {}).In(0), ""),
		NewType("HTML", reflect.TypeOf(func(template.HTML) {}).In(0), ""),
		NewType("HTMLAttr", reflect.TypeOf(func(template.HTMLAttr) {}).In(0), ""),
		NewFunction("HTMLEscape", template.HTMLEscape, ""),
		NewFunction("HTMLEscapeString", template.HTMLEscapeString, ""),
		NewFunction("HTMLEscaper", template.HTMLEscaper, ""),
		NewFunction("IsTrue", template.IsTrue, ""),
		NewType("JS", reflect.TypeOf(func(template.JS) {}).In(0), ""),
		NewFunction("JSEscape", template.JSEscape, ""),
		NewFunction("JSEscapeString", template.JSEscapeString, ""),
		NewFunction("JSEscaper", template.JSEscaper, ""),
		NewType("JSStr", reflect.TypeOf(func(template.JSStr) {}).In(0), ""),
		NewFunction("Must", template.Must, ""),
		NewFunction("New", template.New, ""),
		NewConst("OK", template.OK, ""),
		NewFunction("ParseFS", template.ParseFS, ""),
		NewFunction("ParseFiles", template.ParseFiles, ""),
		NewFunction("ParseGlob", template.ParseGlob, ""),
		NewType("Srcset", reflect.TypeOf(func(template.Srcset) {}).In(0), ""),
		NewType("Template", reflect.TypeOf(func(template.Template) {}).In(0), ""),
		NewType("URL", reflect.TypeOf(func(template.URL) {}).In(0), ""),
		NewFunction("URLQueryEscaper", template.URLQueryEscaper, ""),
	)
	AddPackage("bytes", "bytes",
		NewType("Buffer", reflect.TypeOf(func(bytes.Buffer) {}).In(0), ""),
		NewFunction("Compare", bytes.Compare, ""),
		NewFunction("Contains", bytes.Contains, ""),
		NewFunction("ContainsAny", bytes.ContainsAny, ""),
		NewFunction("ContainsRune", bytes.ContainsRune, ""),
		NewFunction("Count", bytes.Count, ""),
		NewFunction("Cut", bytes.Cut, ""),
		NewFunction("Equal", bytes.Equal, ""),
		NewFunction("EqualFold", bytes.EqualFold, ""),
		NewVar("ErrTooLarge", &bytes.ErrTooLarge, reflect.TypeOf(func(error) {}).In(0), ""),
		NewFunction("Fields", bytes.Fields, ""),
		NewFunction("FieldsFunc", bytes.FieldsFunc, ""),
		NewFunction("HasPrefix", bytes.HasPrefix, ""),
		NewFunction("HasSuffix", bytes.HasSuffix, ""),
		NewFunction("Index", bytes.Index, ""),
		NewFunction("IndexAny", bytes.IndexAny, ""),
		NewFunction("IndexByte", bytes.IndexByte, ""),
		NewFunction("IndexFunc", bytes.IndexFunc, ""),
		NewFunction("IndexRune", bytes.IndexRune, ""),
		NewFunction("Join", bytes.Join, ""),
		NewFunction("LastIndex", bytes.LastIndex, ""),
		NewFunction("LastIndexAny", bytes.LastIndexAny, ""),
		NewFunction("LastIndexByte", bytes.LastIndexByte, ""),
		NewFunction("LastIndexFunc", bytes.LastIndexFunc, ""),
		NewFunction("Map", bytes.Map, ""),
		NewConst("MinRead", bytes.MinRead, ""),
		NewFunction("NewBuffer", bytes.NewBuffer, ""),
		NewFunction("NewBufferString", bytes.NewBufferString, ""),
		NewFunction("NewReader", bytes.NewReader, ""),
		NewType("Reader", reflect.TypeOf(func(bytes.Reader) {}).In(0), ""),
		NewFunction("Repeat", bytes.Repeat, ""),
		NewFunction("Replace", bytes.Replace, ""),
		NewFunction("ReplaceAll", bytes.ReplaceAll, ""),
		NewFunction("Runes", bytes.Runes, ""),
		NewFunction("Split", bytes.Split, ""),
		NewFunction("SplitAfter", bytes.SplitAfter, ""),
		NewFunction("SplitAfterN", bytes.SplitAfterN, ""),
		NewFunction("SplitN", bytes.SplitN, ""),
		NewFunction("Title", bytes.Title, ""),
		NewFunction("ToLower", bytes.ToLower, ""),
		NewFunction("ToLowerSpecial", bytes.ToLowerSpecial, ""),
		NewFunction("ToTitle", bytes.ToTitle, ""),
		NewFunction("ToTitleSpecial", bytes.ToTitleSpecial, ""),
		NewFunction("ToUpper", bytes.ToUpper, ""),
		NewFunction("ToUpperSpecial", bytes.ToUpperSpecial, ""),
		NewFunction("ToValidUTF8", bytes.ToValidUTF8, ""),
		NewFunction("Trim", bytes.Trim, ""),
		NewFunction("TrimFunc", bytes.TrimFunc, ""),
		NewFunction("TrimLeft", bytes.TrimLeft, ""),
		NewFunction("TrimLeftFunc", bytes.TrimLeftFunc, ""),
		NewFunction("TrimPrefix", bytes.TrimPrefix, ""),
		NewFunction("TrimRight", bytes.TrimRight, ""),
		NewFunction("TrimRightFunc", bytes.TrimRightFunc, ""),
		NewFunction("TrimSpace", bytes.TrimSpace, ""),
		NewFunction("TrimSuffix", bytes.TrimSuffix, ""),
	)
	AddPackage("container/list", "list",
		NewType("Element", reflect.TypeOf(func(list.Element) {}).In(0), ""),
		NewType("List", reflect.TypeOf(func(list.List) {}).In(0), ""),
		NewFunction("New", list.New, ""),
	)
	AddPackage("math/rand", "rand",
		NewFunction("ExpFloat64", rand.ExpFloat64, ""),
		NewFunction("Float32", rand.Float32, ""),
		NewFunction("Float64", rand.Float64, ""),
		NewFunction("Int", rand.Int, ""),
		NewFunction("Int31", rand.Int31, ""),
		NewFunction("Int31n", rand.Int31n, ""),
		NewFunction("Int63", rand.Int63, ""),
		NewFunction("Int63n", rand.Int63n, ""),
		NewFunction("Intn", rand.Intn, ""),
		NewFunction("New", rand.New, ""),
		NewFunction("NewSource", rand.NewSource, ""),
		NewFunction("NewZipf", rand.NewZipf, ""),
		NewFunction("NormFloat64", rand.NormFloat64, ""),
		NewFunction("Perm", rand.Perm, ""),
		NewType("Rand", reflect.TypeOf(func(rand.Rand) {}).In(0), ""),
		NewFunction("Read", rand.Read, ""),
		NewFunction("Seed", rand.Seed, ""),
		NewFunction("Shuffle", rand.Shuffle, ""),
		NewType("Source", reflect.TypeOf(func(rand.Source) {}).In(0), ""),
		NewType("Source64", reflect.TypeOf(func(rand.Source64) {}).In(0), ""),
		NewFunction("Uint32", rand.Uint32, ""),
		NewFunction("Uint64", rand.Uint64, ""),
		NewType("Zipf", reflect.TypeOf(func(rand.Zipf) {}).In(0), ""),
	)
	AddPackage("time", "time",
		NewConst("ANSIC", time.ANSIC, ""),
		NewFunction("After", time.After, ""),
		NewFunction("AfterFunc", time.AfterFunc, ""),
		NewConst("April", time.April, ""),
		NewConst("August", time.August, ""),
		NewFunction("Date", time.Date, ""),
		NewConst("December", time.December, ""),
		NewType("Duration", reflect.TypeOf(func(time.Duration) {}).In(0), ""),
		NewConst("February", time.February, ""),
		NewFunction("FixedZone", time.FixedZone, ""),
		NewConst("Friday", time.Friday, ""),
		NewConst("Hour", time.Hour, ""),
		NewConst("January", time.January, ""),
		NewConst("July", time.July, ""),
		NewConst("June", time.June, ""),
		NewConst("Kitchen", time.Kitchen, ""),
		NewConst("Layout", time.Layout, ""),
		NewFunction("LoadLocation", time.LoadLocation, ""),
		NewFunction("LoadLocationFromTZData", time.LoadLocationFromTZData, ""),
		NewVar("Local", &time.Local, reflect.TypeOf(time.Local), ""),
		NewType("Location", reflect.TypeOf(func(time.Location) {}).In(0), ""),
		NewConst("March", time.March, ""),
		NewConst("May", time.May, ""),
		NewConst("Microsecond", time.Microsecond, ""),
		NewConst("Millisecond", time.Millisecond, ""),
		NewConst("Minute", time.Minute, ""),
		NewConst("Monday", time.Monday, ""),
		NewType("Month", reflect.TypeOf(func(time.Month) {}).In(0), ""),
		NewConst("Nanosecond", time.Nanosecond, ""),
		NewFunction("NewTicker", time.NewTicker, ""),
		NewFunction("NewTimer", time.NewTimer, ""),
		NewConst("November", time.November, ""),
		NewFunction("Now", time.Now, ""),
		NewConst("October", time.October, ""),
		NewFunction("Parse", time.Parse, ""),
		NewFunction("ParseDuration", time.ParseDuration, ""),
		NewType("ParseError", reflect.TypeOf(func(time.ParseError) {}).In(0), ""),
		NewFunction("ParseInLocation", time.ParseInLocation, ""),
		NewConst("RFC1123", time.RFC1123, ""),
		NewConst("RFC1123Z", time.RFC1123Z, ""),
		NewConst("RFC3339", time.RFC3339, ""),
		NewConst("RFC3339Nano", time.RFC3339Nano, ""),
		NewConst("RFC822", time.RFC822, ""),
		NewConst("RFC822Z", time.RFC822Z, ""),
		NewConst("RFC850", time.RFC850, ""),
		NewConst("RubyDate", time.RubyDate, ""),
		NewConst("Saturday", time.Saturday, ""),
		NewConst("Second", time.Second, ""),
		NewConst("September", time.September, ""),
		NewFunction("Since", time.Since, ""),
		NewFunction("Sleep", time.Sleep, ""),
		NewConst("Stamp", time.Stamp, ""),
		NewConst("StampMicro", time.StampMicro, ""),
		NewConst("StampMilli", time.StampMilli, ""),
		NewConst("StampNano", time.StampNano, ""),
		NewConst("Sunday", time.Sunday, ""),
		NewConst("Thursday", time.Thursday, ""),
		NewFunction("Tick", time.Tick, ""),
		NewType("Ticker", reflect.TypeOf(func(time.Ticker) {}).In(0), ""),
		NewType("Time", reflect.TypeOf(func(time.Time) {}).In(0), ""),
		NewType("Timer", reflect.TypeOf(func(time.Timer) {}).In(0), ""),
		NewConst("Tuesday", time.Tuesday, ""),
		NewVar("UTC", &time.UTC, reflect.TypeOf(time.UTC), ""),
		NewFunction("Unix", time.Unix, ""),
		NewConst("UnixDate", time.UnixDate, ""),
		NewFunction("UnixMicro", time.UnixMicro, ""),
		NewFunction("UnixMilli", time.UnixMilli, ""),
		NewFunction("Until", time.Until, ""),
		NewConst("Wednesday", time.Wednesday, ""),
		NewType("Weekday", reflect.TypeOf(func(time.Weekday) {}).In(0), ""),
	)
	AddPackage("container/ring", "ring",
		NewFunction("New", ring.New, ""),
		NewType("Ring", reflect.TypeOf(func(ring.Ring) {}).In(0), ""),
	)
	AddPackage("html", "html",
		NewFunction("EscapeString", html.EscapeString, ""),
		NewFunction("UnescapeString", html.UnescapeString, ""),
	)
	AddPackage("unicode/utf8", "utf8",
		NewFunction("AppendRune", utf8.AppendRune, ""),
		NewFunction("DecodeLastRune", utf8.DecodeLastRune, ""),
		NewFunction("DecodeLastRuneInString", utf8.DecodeLastRuneInString, ""),
		NewFunction("DecodeRune", utf8.DecodeRune, ""),
		NewFunction("DecodeRuneInString", utf8.DecodeRuneInString, ""),
		NewFunction("EncodeRune", utf8.EncodeRune, ""),
		NewFunction("FullRune", utf8.FullRune, ""),
		NewFunction("FullRuneInString", utf8.FullRuneInString, ""),
		NewConst("MaxRune", utf8.MaxRune, ""),
		NewFunction("RuneCount", utf8.RuneCount, ""),
		NewFunction("RuneCountInString", utf8.RuneCountInString, ""),
		NewConst("RuneError", utf8.RuneError, ""),
		NewFunction("RuneLen", utf8.RuneLen, ""),
		NewConst("RuneSelf", utf8.RuneSelf, ""),
		NewFunction("RuneStart", utf8.RuneStart, ""),
		NewConst("UTFMax", utf8.UTFMax, ""),
		NewFunction("Valid", utf8.Valid, ""),
		NewFunction("ValidRune", utf8.ValidRune, ""),
		NewFunction("ValidString", utf8.ValidString, ""),
	)
	AddPackage("sync/atomic", "atomic",
		NewFunction("AddInt32", atomic.AddInt32, ""),
		NewFunction("AddInt64", atomic.AddInt64, ""),
		NewFunction("AddUint32", atomic.AddUint32, ""),
		NewFunction("AddUint64", atomic.AddUint64, ""),
		NewFunction("AddUintptr", atomic.AddUintptr, ""),
		NewFunction("CompareAndSwapInt32", atomic.CompareAndSwapInt32, ""),
		NewFunction("CompareAndSwapInt64", atomic.CompareAndSwapInt64, ""),
		NewFunction("CompareAndSwapPointer", atomic.CompareAndSwapPointer, ""),
		NewFunction("CompareAndSwapUint32", atomic.CompareAndSwapUint32, ""),
		NewFunction("CompareAndSwapUint64", atomic.CompareAndSwapUint64, ""),
		NewFunction("CompareAndSwapUintptr", atomic.CompareAndSwapUintptr, ""),
		NewFunction("LoadInt32", atomic.LoadInt32, ""),
		NewFunction("LoadInt64", atomic.LoadInt64, ""),
		NewFunction("LoadPointer", atomic.LoadPointer, ""),
		NewFunction("LoadUint32", atomic.LoadUint32, ""),
		NewFunction("LoadUint64", atomic.LoadUint64, ""),
		NewFunction("LoadUintptr", atomic.LoadUintptr, ""),
		NewFunction("StoreInt32", atomic.StoreInt32, ""),
		NewFunction("StoreInt64", atomic.StoreInt64, ""),
		NewFunction("StorePointer", atomic.StorePointer, ""),
		NewFunction("StoreUint32", atomic.StoreUint32, ""),
		NewFunction("StoreUint64", atomic.StoreUint64, ""),
		NewFunction("StoreUintptr", atomic.StoreUintptr, ""),
		NewFunction("SwapInt32", atomic.SwapInt32, ""),
		NewFunction("SwapInt64", atomic.SwapInt64, ""),
		NewFunction("SwapPointer", atomic.SwapPointer, ""),
		NewFunction("SwapUint32", atomic.SwapUint32, ""),
		NewFunction("SwapUint64", atomic.SwapUint64, ""),
		NewFunction("SwapUintptr", atomic.SwapUintptr, ""),
		NewType("Value", reflect.TypeOf(func(atomic.Value) {}).In(0), ""),
	)
	AddPackage("strconv", "strconv",
		NewFunction("AppendBool", strconv.AppendBool, ""),
		NewFunction("AppendFloat", strconv.AppendFloat, ""),
		NewFunction("AppendInt", strconv.AppendInt, ""),
		NewFunction("AppendQuote", strconv.AppendQuote, ""),
		NewFunction("AppendQuoteRune", strconv.AppendQuoteRune, ""),
		NewFunction("AppendQuoteRuneToASCII", strconv.AppendQuoteRuneToASCII, ""),
		NewFunction("AppendQuoteRuneToGraphic", strconv.AppendQuoteRuneToGraphic, ""),
		NewFunction("AppendQuoteToASCII", strconv.AppendQuoteToASCII, ""),
		NewFunction("AppendQuoteToGraphic", strconv.AppendQuoteToGraphic, ""),
		NewFunction("AppendUint", strconv.AppendUint, ""),
		NewFunction("Atoi", strconv.Atoi, ""),
		NewFunction("CanBackquote", strconv.CanBackquote, ""),
		NewVar("ErrRange", &strconv.ErrRange, reflect.TypeOf(func(error) {}).In(0), ""),
		NewVar("ErrSyntax", &strconv.ErrSyntax, reflect.TypeOf(func(error) {}).In(0), ""),
		NewFunction("FormatBool", strconv.FormatBool, ""),
		NewFunction("FormatComplex", strconv.FormatComplex, ""),
		NewFunction("FormatFloat", strconv.FormatFloat, ""),
		NewFunction("FormatInt", strconv.FormatInt, ""),
		NewFunction("FormatUint", strconv.FormatUint, ""),
		NewConst("IntSize", strconv.IntSize, ""),
		NewFunction("IsGraphic", strconv.IsGraphic, ""),
		NewFunction("IsPrint", strconv.IsPrint, ""),
		NewFunction("Itoa", strconv.Itoa, ""),
		NewType("NumError", reflect.TypeOf(func(strconv.NumError) {}).In(0), ""),
		NewFunction("ParseBool", strconv.ParseBool, ""),
		NewFunction("ParseComplex", strconv.ParseComplex, ""),
		NewFunction("ParseFloat", strconv.ParseFloat, ""),
		NewFunction("ParseInt", strconv.ParseInt, ""),
		NewFunction("ParseUint", strconv.ParseUint, ""),
		NewFunction("Quote", strconv.Quote, ""),
		NewFunction("QuoteRune", strconv.QuoteRune, ""),
		NewFunction("QuoteRuneToASCII", strconv.QuoteRuneToASCII, ""),
		NewFunction("QuoteRuneToGraphic", strconv.QuoteRuneToGraphic, ""),
		NewFunction("QuoteToASCII", strconv.QuoteToASCII, ""),
		NewFunction("QuoteToGraphic", strconv.QuoteToGraphic, ""),
		NewFunction("QuotedPrefix", strconv.QuotedPrefix, ""),
		NewFunction("Unquote", strconv.Unquote, ""),
		NewFunction("UnquoteChar", strconv.UnquoteChar, ""),
	)
	AddPackage("unicode", "unicode",
		NewVar("ASCII_Hex_Digit", &unicode.ASCII_Hex_Digit, reflect.TypeOf(unicode.ASCII_Hex_Digit), ""),
		NewVar("Adlam", &unicode.Adlam, reflect.TypeOf(unicode.Adlam), ""),
		NewVar("Ahom", &unicode.Ahom, reflect.TypeOf(unicode.Ahom), ""),
		NewVar("Anatolian_Hieroglyphs", &unicode.Anatolian_Hieroglyphs, reflect.TypeOf(unicode.Anatolian_Hieroglyphs), ""),
		NewVar("Arabic", &unicode.Arabic, reflect.TypeOf(unicode.Arabic), ""),
		NewVar("Armenian", &unicode.Armenian, reflect.TypeOf(unicode.Armenian), ""),
		NewVar("Avestan", &unicode.Avestan, reflect.TypeOf(unicode.Avestan), ""),
		NewVar("AzeriCase", &unicode.AzeriCase, reflect.TypeOf(unicode.AzeriCase), ""),
		NewVar("Balinese", &unicode.Balinese, reflect.TypeOf(unicode.Balinese), ""),
		NewVar("Bamum", &unicode.Bamum, reflect.TypeOf(unicode.Bamum), ""),
		NewVar("Bassa_Vah", &unicode.Bassa_Vah, reflect.TypeOf(unicode.Bassa_Vah), ""),
		NewVar("Batak", &unicode.Batak, reflect.TypeOf(unicode.Batak), ""),
		NewVar("Bengali", &unicode.Bengali, reflect.TypeOf(unicode.Bengali), ""),
		NewVar("Bhaiksuki", &unicode.Bhaiksuki, reflect.TypeOf(unicode.Bhaiksuki), ""),
		NewVar("Bidi_Control", &unicode.Bidi_Control, reflect.TypeOf(unicode.Bidi_Control), ""),
		NewVar("Bopomofo", &unicode.Bopomofo, reflect.TypeOf(unicode.Bopomofo), ""),
		NewVar("Brahmi", &unicode.Brahmi, reflect.TypeOf(unicode.Brahmi), ""),
		NewVar("Braille", &unicode.Braille, reflect.TypeOf(unicode.Braille), ""),
		NewVar("Buginese", &unicode.Buginese, reflect.TypeOf(unicode.Buginese), ""),
		NewVar("Buhid", &unicode.Buhid, reflect.TypeOf(unicode.Buhid), ""),
		NewVar("C", &unicode.C, reflect.TypeOf(unicode.C), ""),
		NewVar("Canadian_Aboriginal", &unicode.Canadian_Aboriginal, reflect.TypeOf(unicode.Canadian_Aboriginal), ""),
		NewVar("Carian", &unicode.Carian, reflect.TypeOf(unicode.Carian), ""),
		NewType("CaseRange", reflect.TypeOf(func(unicode.CaseRange) {}).In(0), ""),
		NewVar("CaseRanges", &unicode.CaseRanges, reflect.TypeOf(unicode.CaseRanges), ""),
		NewVar("Categories", &unicode.Categories, reflect.TypeOf(unicode.Categories), ""),
		NewVar("Caucasian_Albanian", &unicode.Caucasian_Albanian, reflect.TypeOf(unicode.Caucasian_Albanian), ""),
		NewVar("Cc", &unicode.Cc, reflect.TypeOf(unicode.Cc), ""),
		NewVar("Cf", &unicode.Cf, reflect.TypeOf(unicode.Cf), ""),
		NewVar("Chakma", &unicode.Chakma, reflect.TypeOf(unicode.Chakma), ""),
		NewVar("Cham", &unicode.Cham, reflect.TypeOf(unicode.Cham), ""),
		NewVar("Cherokee", &unicode.Cherokee, reflect.TypeOf(unicode.Cherokee), ""),
		NewVar("Chorasmian", &unicode.Chorasmian, reflect.TypeOf(unicode.Chorasmian), ""),
		NewVar("Co", &unicode.Co, reflect.TypeOf(unicode.Co), ""),
		NewVar("Common", &unicode.Common, reflect.TypeOf(unicode.Common), ""),
		NewVar("Coptic", &unicode.Coptic, reflect.TypeOf(unicode.Coptic), ""),
		NewVar("Cs", &unicode.Cs, reflect.TypeOf(unicode.Cs), ""),
		NewVar("Cuneiform", &unicode.Cuneiform, reflect.TypeOf(unicode.Cuneiform), ""),
		NewVar("Cypriot", &unicode.Cypriot, reflect.TypeOf(unicode.Cypriot), ""),
		NewVar("Cyrillic", &unicode.Cyrillic, reflect.TypeOf(unicode.Cyrillic), ""),
		NewVar("Dash", &unicode.Dash, reflect.TypeOf(unicode.Dash), ""),
		NewVar("Deprecated", &unicode.Deprecated, reflect.TypeOf(unicode.Deprecated), ""),
		NewVar("Deseret", &unicode.Deseret, reflect.TypeOf(unicode.Deseret), ""),
		NewVar("Devanagari", &unicode.Devanagari, reflect.TypeOf(unicode.Devanagari), ""),
		NewVar("Diacritic", &unicode.Diacritic, reflect.TypeOf(unicode.Diacritic), ""),
		NewVar("Digit", &unicode.Digit, reflect.TypeOf(unicode.Digit), ""),
		NewVar("Dives_Akuru", &unicode.Dives_Akuru, reflect.TypeOf(unicode.Dives_Akuru), ""),
		NewVar("Dogra", &unicode.Dogra, reflect.TypeOf(unicode.Dogra), ""),
		NewVar("Duployan", &unicode.Duployan, reflect.TypeOf(unicode.Duployan), ""),
		NewVar("Egyptian_Hieroglyphs", &unicode.Egyptian_Hieroglyphs, reflect.TypeOf(unicode.Egyptian_Hieroglyphs), ""),
		NewVar("Elbasan", &unicode.Elbasan, reflect.TypeOf(unicode.Elbasan), ""),
		NewVar("Elymaic", &unicode.Elymaic, reflect.TypeOf(unicode.Elymaic), ""),
		NewVar("Ethiopic", &unicode.Ethiopic, reflect.TypeOf(unicode.Ethiopic), ""),
		NewVar("Extender", &unicode.Extender, reflect.TypeOf(unicode.Extender), ""),
		NewVar("FoldCategory", &unicode.FoldCategory, reflect.TypeOf(unicode.FoldCategory), ""),
		NewVar("FoldScript", &unicode.FoldScript, reflect.TypeOf(unicode.FoldScript), ""),
		NewVar("Georgian", &unicode.Georgian, reflect.TypeOf(unicode.Georgian), ""),
		NewVar("Glagolitic", &unicode.Glagolitic, reflect.TypeOf(unicode.Glagolitic), ""),
		NewVar("Gothic", &unicode.Gothic, reflect.TypeOf(unicode.Gothic), ""),
		NewVar("Grantha", &unicode.Grantha, reflect.TypeOf(unicode.Grantha), ""),
		NewVar("GraphicRanges", &unicode.GraphicRanges, reflect.TypeOf(unicode.GraphicRanges), ""),
		NewVar("Greek", &unicode.Greek, reflect.TypeOf(unicode.Greek), ""),
		NewVar("Gujarati", &unicode.Gujarati, reflect.TypeOf(unicode.Gujarati), ""),
		NewVar("Gunjala_Gondi", &unicode.Gunjala_Gondi, reflect.TypeOf(unicode.Gunjala_Gondi), ""),
		NewVar("Gurmukhi", &unicode.Gurmukhi, reflect.TypeOf(unicode.Gurmukhi), ""),
		NewVar("Han", &unicode.Han, reflect.TypeOf(unicode.Han), ""),
		NewVar("Hangul", &unicode.Hangul, reflect.TypeOf(unicode.Hangul), ""),
		NewVar("Hanifi_Rohingya", &unicode.Hanifi_Rohingya, reflect.TypeOf(unicode.Hanifi_Rohingya), ""),
		NewVar("Hanunoo", &unicode.Hanunoo, reflect.TypeOf(unicode.Hanunoo), ""),
		NewVar("Hatran", &unicode.Hatran, reflect.TypeOf(unicode.Hatran), ""),
		NewVar("Hebrew", &unicode.Hebrew, reflect.TypeOf(unicode.Hebrew), ""),
		NewVar("Hex_Digit", &unicode.Hex_Digit, reflect.TypeOf(unicode.Hex_Digit), ""),
		NewVar("Hiragana", &unicode.Hiragana, reflect.TypeOf(unicode.Hiragana), ""),
		NewVar("Hyphen", &unicode.Hyphen, reflect.TypeOf(unicode.Hyphen), ""),
		NewVar("IDS_Binary_Operator", &unicode.IDS_Binary_Operator, reflect.TypeOf(unicode.IDS_Binary_Operator), ""),
		NewVar("IDS_Trinary_Operator", &unicode.IDS_Trinary_Operator, reflect.TypeOf(unicode.IDS_Trinary_Operator), ""),
		NewVar("Ideographic", &unicode.Ideographic, reflect.TypeOf(unicode.Ideographic), ""),
		NewVar("Imperial_Aramaic", &unicode.Imperial_Aramaic, reflect.TypeOf(unicode.Imperial_Aramaic), ""),
		NewFunction("In", unicode.In, ""),
		NewVar("Inherited", &unicode.Inherited, reflect.TypeOf(unicode.Inherited), ""),
		NewVar("Inscriptional_Pahlavi", &unicode.Inscriptional_Pahlavi, reflect.TypeOf(unicode.Inscriptional_Pahlavi), ""),
		NewVar("Inscriptional_Parthian", &unicode.Inscriptional_Parthian, reflect.TypeOf(unicode.Inscriptional_Parthian), ""),
		NewFunction("Is", unicode.Is, ""),
		NewFunction("IsControl", unicode.IsControl, ""),
		NewFunction("IsDigit", unicode.IsDigit, ""),
		NewFunction("IsGraphic", unicode.IsGraphic, ""),
		NewFunction("IsLetter", unicode.IsLetter, ""),
		NewFunction("IsLower", unicode.IsLower, ""),
		NewFunction("IsMark", unicode.IsMark, ""),
		NewFunction("IsNumber", unicode.IsNumber, ""),
		NewFunction("IsOneOf", unicode.IsOneOf, ""),
		NewFunction("IsPrint", unicode.IsPrint, ""),
		NewFunction("IsPunct", unicode.IsPunct, ""),
		NewFunction("IsSpace", unicode.IsSpace, ""),
		NewFunction("IsSymbol", unicode.IsSymbol, ""),
		NewFunction("IsTitle", unicode.IsTitle, ""),
		NewFunction("IsUpper", unicode.IsUpper, ""),
		NewVar("Javanese", &unicode.Javanese, reflect.TypeOf(unicode.Javanese), ""),
		NewVar("Join_Control", &unicode.Join_Control, reflect.TypeOf(unicode.Join_Control), ""),
		NewVar("Kaithi", &unicode.Kaithi, reflect.TypeOf(unicode.Kaithi), ""),
		NewVar("Kannada", &unicode.Kannada, reflect.TypeOf(unicode.Kannada), ""),
		NewVar("Katakana", &unicode.Katakana, reflect.TypeOf(unicode.Katakana), ""),
		NewVar("Kayah_Li", &unicode.Kayah_Li, reflect.TypeOf(unicode.Kayah_Li), ""),
		NewVar("Kharoshthi", &unicode.Kharoshthi, reflect.TypeOf(unicode.Kharoshthi), ""),
		NewVar("Khitan_Small_Script", &unicode.Khitan_Small_Script, reflect.TypeOf(unicode.Khitan_Small_Script), ""),
		NewVar("Khmer", &unicode.Khmer, reflect.TypeOf(unicode.Khmer), ""),
		NewVar("Khojki", &unicode.Khojki, reflect.TypeOf(unicode.Khojki), ""),
		NewVar("Khudawadi", &unicode.Khudawadi, reflect.TypeOf(unicode.Khudawadi), ""),
		NewVar("L", &unicode.L, reflect.TypeOf(unicode.L), ""),
		NewVar("Lao", &unicode.Lao, reflect.TypeOf(unicode.Lao), ""),
		NewVar("Latin", &unicode.Latin, reflect.TypeOf(unicode.Latin), ""),
		NewVar("Lepcha", &unicode.Lepcha, reflect.TypeOf(unicode.Lepcha), ""),
		NewVar("Letter", &unicode.Letter, reflect.TypeOf(unicode.Letter), ""),
		NewVar("Limbu", &unicode.Limbu, reflect.TypeOf(unicode.Limbu), ""),
		NewVar("Linear_A", &unicode.Linear_A, reflect.TypeOf(unicode.Linear_A), ""),
		NewVar("Linear_B", &unicode.Linear_B, reflect.TypeOf(unicode.Linear_B), ""),
		NewVar("Lisu", &unicode.Lisu, reflect.TypeOf(unicode.Lisu), ""),
		NewVar("Ll", &unicode.Ll, reflect.TypeOf(unicode.Ll), ""),
		NewVar("Lm", &unicode.Lm, reflect.TypeOf(unicode.Lm), ""),
		NewVar("Lo", &unicode.Lo, reflect.TypeOf(unicode.Lo), ""),
		NewVar("Logical_Order_Exception", &unicode.Logical_Order_Exception, reflect.TypeOf(unicode.Logical_Order_Exception), ""),
		NewVar("Lower", &unicode.Lower, reflect.TypeOf(unicode.Lower), ""),
		NewConst("LowerCase", unicode.LowerCase, ""),
		NewVar("Lt", &unicode.Lt, reflect.TypeOf(unicode.Lt), ""),
		NewVar("Lu", &unicode.Lu, reflect.TypeOf(unicode.Lu), ""),
		NewVar("Lycian", &unicode.Lycian, reflect.TypeOf(unicode.Lycian), ""),
		NewVar("Lydian", &unicode.Lydian, reflect.TypeOf(unicode.Lydian), ""),
		NewVar("M", &unicode.M, reflect.TypeOf(unicode.M), ""),
		NewVar("Mahajani", &unicode.Mahajani, reflect.TypeOf(unicode.Mahajani), ""),
		NewVar("Makasar", &unicode.Makasar, reflect.TypeOf(unicode.Makasar), ""),
		NewVar("Malayalam", &unicode.Malayalam, reflect.TypeOf(unicode.Malayalam), ""),
		NewVar("Mandaic", &unicode.Mandaic, reflect.TypeOf(unicode.Mandaic), ""),
		NewVar("Manichaean", &unicode.Manichaean, reflect.TypeOf(unicode.Manichaean), ""),
		NewVar("Marchen", &unicode.Marchen, reflect.TypeOf(unicode.Marchen), ""),
		NewVar("Mark", &unicode.Mark, reflect.TypeOf(unicode.Mark), ""),
		NewVar("Masaram_Gondi", &unicode.Masaram_Gondi, reflect.TypeOf(unicode.Masaram_Gondi), ""),
		NewConst("MaxASCII", unicode.MaxASCII, ""),
		NewConst("MaxCase", unicode.MaxCase, ""),
		NewConst("MaxLatin1", unicode.MaxLatin1, ""),
		NewConst("MaxRune", unicode.MaxRune, ""),
		NewVar("Mc", &unicode.Mc, reflect.TypeOf(unicode.Mc), ""),
		NewVar("Me", &unicode.Me, reflect.TypeOf(unicode.Me), ""),
		NewVar("Medefaidrin", &unicode.Medefaidrin, reflect.TypeOf(unicode.Medefaidrin), ""),
		NewVar("Meetei_Mayek", &unicode.Meetei_Mayek, reflect.TypeOf(unicode.Meetei_Mayek), ""),
		NewVar("Mende_Kikakui", &unicode.Mende_Kikakui, reflect.TypeOf(unicode.Mende_Kikakui), ""),
		NewVar("Meroitic_Cursive", &unicode.Meroitic_Cursive, reflect.TypeOf(unicode.Meroitic_Cursive), ""),
		NewVar("Meroitic_Hieroglyphs", &unicode.Meroitic_Hieroglyphs, reflect.TypeOf(unicode.Meroitic_Hieroglyphs), ""),
		NewVar("Miao", &unicode.Miao, reflect.TypeOf(unicode.Miao), ""),
		NewVar("Mn", &unicode.Mn, reflect.TypeOf(unicode.Mn), ""),
		NewVar("Modi", &unicode.Modi, reflect.TypeOf(unicode.Modi), ""),
		NewVar("Mongolian", &unicode.Mongolian, reflect.TypeOf(unicode.Mongolian), ""),
		NewVar("Mro", &unicode.Mro, reflect.TypeOf(unicode.Mro), ""),
		NewVar("Multani", &unicode.Multani, reflect.TypeOf(unicode.Multani), ""),
		NewVar("Myanmar", &unicode.Myanmar, reflect.TypeOf(unicode.Myanmar), ""),
		NewVar("N", &unicode.N, reflect.TypeOf(unicode.N), ""),
		NewVar("Nabataean", &unicode.Nabataean, reflect.TypeOf(unicode.Nabataean), ""),
		NewVar("Nandinagari", &unicode.Nandinagari, reflect.TypeOf(unicode.Nandinagari), ""),
		NewVar("Nd", &unicode.Nd, reflect.TypeOf(unicode.Nd), ""),
		NewVar("New_Tai_Lue", &unicode.New_Tai_Lue, reflect.TypeOf(unicode.New_Tai_Lue), ""),
		NewVar("Newa", &unicode.Newa, reflect.TypeOf(unicode.Newa), ""),
		NewVar("Nko", &unicode.Nko, reflect.TypeOf(unicode.Nko), ""),
		NewVar("Nl", &unicode.Nl, reflect.TypeOf(unicode.Nl), ""),
		NewVar("No", &unicode.No, reflect.TypeOf(unicode.No), ""),
		NewVar("Noncharacter_Code_Point", &unicode.Noncharacter_Code_Point, reflect.TypeOf(unicode.Noncharacter_Code_Point), ""),
		NewVar("Number", &unicode.Number, reflect.TypeOf(unicode.Number), ""),
		NewVar("Nushu", &unicode.Nushu, reflect.TypeOf(unicode.Nushu), ""),
		NewVar("Nyiakeng_Puachue_Hmong", &unicode.Nyiakeng_Puachue_Hmong, reflect.TypeOf(unicode.Nyiakeng_Puachue_Hmong), ""),
		NewVar("Ogham", &unicode.Ogham, reflect.TypeOf(unicode.Ogham), ""),
		NewVar("Ol_Chiki", &unicode.Ol_Chiki, reflect.TypeOf(unicode.Ol_Chiki), ""),
		NewVar("Old_Hungarian", &unicode.Old_Hungarian, reflect.TypeOf(unicode.Old_Hungarian), ""),
		NewVar("Old_Italic", &unicode.Old_Italic, reflect.TypeOf(unicode.Old_Italic), ""),
		NewVar("Old_North_Arabian", &unicode.Old_North_Arabian, reflect.TypeOf(unicode.Old_North_Arabian), ""),
		NewVar("Old_Permic", &unicode.Old_Permic, reflect.TypeOf(unicode.Old_Permic), ""),
		NewVar("Old_Persian", &unicode.Old_Persian, reflect.TypeOf(unicode.Old_Persian), ""),
		NewVar("Old_Sogdian", &unicode.Old_Sogdian, reflect.TypeOf(unicode.Old_Sogdian), ""),
		NewVar("Old_South_Arabian", &unicode.Old_South_Arabian, reflect.TypeOf(unicode.Old_South_Arabian), ""),
		NewVar("Old_Turkic", &unicode.Old_Turkic, reflect.TypeOf(unicode.Old_Turkic), ""),
		NewVar("Oriya", &unicode.Oriya, reflect.TypeOf(unicode.Oriya), ""),
		NewVar("Osage", &unicode.Osage, reflect.TypeOf(unicode.Osage), ""),
		NewVar("Osmanya", &unicode.Osmanya, reflect.TypeOf(unicode.Osmanya), ""),
		NewVar("Other", &unicode.Other, reflect.TypeOf(unicode.Other), ""),
		NewVar("Other_Alphabetic", &unicode.Other_Alphabetic, reflect.TypeOf(unicode.Other_Alphabetic), ""),
		NewVar("Other_Default_Ignorable_Code_Point", &unicode.Other_Default_Ignorable_Code_Point, reflect.TypeOf(unicode.Other_Default_Ignorable_Code_Point), ""),
		NewVar("Other_Grapheme_Extend", &unicode.Other_Grapheme_Extend, reflect.TypeOf(unicode.Other_Grapheme_Extend), ""),
		NewVar("Other_ID_Continue", &unicode.Other_ID_Continue, reflect.TypeOf(unicode.Other_ID_Continue), ""),
		NewVar("Other_ID_Start", &unicode.Other_ID_Start, reflect.TypeOf(unicode.Other_ID_Start), ""),
		NewVar("Other_Lowercase", &unicode.Other_Lowercase, reflect.TypeOf(unicode.Other_Lowercase), ""),
		NewVar("Other_Math", &unicode.Other_Math, reflect.TypeOf(unicode.Other_Math), ""),
		NewVar("Other_Uppercase", &unicode.Other_Uppercase, reflect.TypeOf(unicode.Other_Uppercase), ""),
		NewVar("P", &unicode.P, reflect.TypeOf(unicode.P), ""),
		NewVar("Pahawh_Hmong", &unicode.Pahawh_Hmong, reflect.TypeOf(unicode.Pahawh_Hmong), ""),
		NewVar("Palmyrene", &unicode.Palmyrene, reflect.TypeOf(unicode.Palmyrene), ""),
		NewVar("Pattern_Syntax", &unicode.Pattern_Syntax, reflect.TypeOf(unicode.Pattern_Syntax), ""),
		NewVar("Pattern_White_Space", &unicode.Pattern_White_Space, reflect.TypeOf(unicode.Pattern_White_Space), ""),
		NewVar("Pau_Cin_Hau", &unicode.Pau_Cin_Hau, reflect.TypeOf(unicode.Pau_Cin_Hau), ""),
		NewVar("Pc", &unicode.Pc, reflect.TypeOf(unicode.Pc), ""),
		NewVar("Pd", &unicode.Pd, reflect.TypeOf(unicode.Pd), ""),
		NewVar("Pe", &unicode.Pe, reflect.TypeOf(unicode.Pe), ""),
		NewVar("Pf", &unicode.Pf, reflect.TypeOf(unicode.Pf), ""),
		NewVar("Phags_Pa", &unicode.Phags_Pa, reflect.TypeOf(unicode.Phags_Pa), ""),
		NewVar("Phoenician", &unicode.Phoenician, reflect.TypeOf(unicode.Phoenician), ""),
		NewVar("Pi", &unicode.Pi, reflect.TypeOf(unicode.Pi), ""),
		NewVar("Po", &unicode.Po, reflect.TypeOf(unicode.Po), ""),
		NewVar("Prepended_Concatenation_Mark", &unicode.Prepended_Concatenation_Mark, reflect.TypeOf(unicode.Prepended_Concatenation_Mark), ""),
		NewVar("PrintRanges", &unicode.PrintRanges, reflect.TypeOf(unicode.PrintRanges), ""),
		NewVar("Properties", &unicode.Properties, reflect.TypeOf(unicode.Properties), ""),
		NewVar("Ps", &unicode.Ps, reflect.TypeOf(unicode.Ps), ""),
		NewVar("Psalter_Pahlavi", &unicode.Psalter_Pahlavi, reflect.TypeOf(unicode.Psalter_Pahlavi), ""),
		NewVar("Punct", &unicode.Punct, reflect.TypeOf(unicode.Punct), ""),
		NewVar("Quotation_Mark", &unicode.Quotation_Mark, reflect.TypeOf(unicode.Quotation_Mark), ""),
		NewVar("Radical", &unicode.Radical, reflect.TypeOf(unicode.Radical), ""),
		NewType("Range16", reflect.TypeOf(func(unicode.Range16) {}).In(0), ""),
		NewType("Range32", reflect.TypeOf(func(unicode.Range32) {}).In(0), ""),
		NewType("RangeTable", reflect.TypeOf(func(unicode.RangeTable) {}).In(0), ""),
		NewVar("Regional_Indicator", &unicode.Regional_Indicator, reflect.TypeOf(unicode.Regional_Indicator), ""),
		NewVar("Rejang", &unicode.Rejang, reflect.TypeOf(unicode.Rejang), ""),
		NewConst("ReplacementChar", unicode.ReplacementChar, ""),
		NewVar("Runic", &unicode.Runic, reflect.TypeOf(unicode.Runic), ""),
		NewVar("S", &unicode.S, reflect.TypeOf(unicode.S), ""),
		NewVar("STerm", &unicode.STerm, reflect.TypeOf(unicode.STerm), ""),
		NewVar("Samaritan", &unicode.Samaritan, reflect.TypeOf(unicode.Samaritan), ""),
		NewVar("Saurashtra", &unicode.Saurashtra, reflect.TypeOf(unicode.Saurashtra), ""),
		NewVar("Sc", &unicode.Sc, reflect.TypeOf(unicode.Sc), ""),
		NewVar("Scripts", &unicode.Scripts, reflect.TypeOf(unicode.Scripts), ""),
		NewVar("Sentence_Terminal", &unicode.Sentence_Terminal, reflect.TypeOf(unicode.Sentence_Terminal), ""),
		NewVar("Sharada", &unicode.Sharada, reflect.TypeOf(unicode.Sharada), ""),
		NewVar("Shavian", &unicode.Shavian, reflect.TypeOf(unicode.Shavian), ""),
		NewVar("Siddham", &unicode.Siddham, reflect.TypeOf(unicode.Siddham), ""),
		NewVar("SignWriting", &unicode.SignWriting, reflect.TypeOf(unicode.SignWriting), ""),
		NewFunction("SimpleFold", unicode.SimpleFold, ""),
		NewVar("Sinhala", &unicode.Sinhala, reflect.TypeOf(unicode.Sinhala), ""),
		NewVar("Sk", &unicode.Sk, reflect.TypeOf(unicode.Sk), ""),
		NewVar("Sm", &unicode.Sm, reflect.TypeOf(unicode.Sm), ""),
		NewVar("So", &unicode.So, reflect.TypeOf(unicode.So), ""),
		NewVar("Soft_Dotted", &unicode.Soft_Dotted, reflect.TypeOf(unicode.Soft_Dotted), ""),
		NewVar("Sogdian", &unicode.Sogdian, reflect.TypeOf(unicode.Sogdian), ""),
		NewVar("Sora_Sompeng", &unicode.Sora_Sompeng, reflect.TypeOf(unicode.Sora_Sompeng), ""),
		NewVar("Soyombo", &unicode.Soyombo, reflect.TypeOf(unicode.Soyombo), ""),
		NewVar("Space", &unicode.Space, reflect.TypeOf(unicode.Space), ""),
		NewType("SpecialCase", reflect.TypeOf(func(unicode.SpecialCase) {}).In(0), ""),
		NewVar("Sundanese", &unicode.Sundanese, reflect.TypeOf(unicode.Sundanese), ""),
		NewVar("Syloti_Nagri", &unicode.Syloti_Nagri, reflect.TypeOf(unicode.Syloti_Nagri), ""),
		NewVar("Symbol", &unicode.Symbol, reflect.TypeOf(unicode.Symbol), ""),
		NewVar("Syriac", &unicode.Syriac, reflect.TypeOf(unicode.Syriac), ""),
		NewVar("Tagalog", &unicode.Tagalog, reflect.TypeOf(unicode.Tagalog), ""),
		NewVar("Tagbanwa", &unicode.Tagbanwa, reflect.TypeOf(unicode.Tagbanwa), ""),
		NewVar("Tai_Le", &unicode.Tai_Le, reflect.TypeOf(unicode.Tai_Le), ""),
		NewVar("Tai_Tham", &unicode.Tai_Tham, reflect.TypeOf(unicode.Tai_Tham), ""),
		NewVar("Tai_Viet", &unicode.Tai_Viet, reflect.TypeOf(unicode.Tai_Viet), ""),
		NewVar("Takri", &unicode.Takri, reflect.TypeOf(unicode.Takri), ""),
		NewVar("Tamil", &unicode.Tamil, reflect.TypeOf(unicode.Tamil), ""),
		NewVar("Tangut", &unicode.Tangut, reflect.TypeOf(unicode.Tangut), ""),
		NewVar("Telugu", &unicode.Telugu, reflect.TypeOf(unicode.Telugu), ""),
		NewVar("Terminal_Punctuation", &unicode.Terminal_Punctuation, reflect.TypeOf(unicode.Terminal_Punctuation), ""),
		NewVar("Thaana", &unicode.Thaana, reflect.TypeOf(unicode.Thaana), ""),
		NewVar("Thai", &unicode.Thai, reflect.TypeOf(unicode.Thai), ""),
		NewVar("Tibetan", &unicode.Tibetan, reflect.TypeOf(unicode.Tibetan), ""),
		NewVar("Tifinagh", &unicode.Tifinagh, reflect.TypeOf(unicode.Tifinagh), ""),
		NewVar("Tirhuta", &unicode.Tirhuta, reflect.TypeOf(unicode.Tirhuta), ""),
		NewVar("Title", &unicode.Title, reflect.TypeOf(unicode.Title), ""),
		NewConst("TitleCase", unicode.TitleCase, ""),
		NewFunction("To", unicode.To, ""),
		NewFunction("ToLower", unicode.ToLower, ""),
		NewFunction("ToTitle", unicode.ToTitle, ""),
		NewFunction("ToUpper", unicode.ToUpper, ""),
		NewVar("TurkishCase", &unicode.TurkishCase, reflect.TypeOf(unicode.TurkishCase), ""),
		NewVar("Ugaritic", &unicode.Ugaritic, reflect.TypeOf(unicode.Ugaritic), ""),
		NewVar("Unified_Ideograph", &unicode.Unified_Ideograph, reflect.TypeOf(unicode.Unified_Ideograph), ""),
		NewVar("Upper", &unicode.Upper, reflect.TypeOf(unicode.Upper), ""),
		NewConst("UpperCase", unicode.UpperCase, ""),
		NewConst("UpperLower", unicode.UpperLower, ""),
		NewVar("Vai", &unicode.Vai, reflect.TypeOf(unicode.Vai), ""),
		NewVar("Variation_Selector", &unicode.Variation_Selector, reflect.TypeOf(unicode.Variation_Selector), ""),
		NewConst("Version", unicode.Version, ""),
		NewVar("Wancho", &unicode.Wancho, reflect.TypeOf(unicode.Wancho), ""),
		NewVar("Warang_Citi", &unicode.Warang_Citi, reflect.TypeOf(unicode.Warang_Citi), ""),
		NewVar("White_Space", &unicode.White_Space, reflect.TypeOf(unicode.White_Space), ""),
		NewVar("Yezidi", &unicode.Yezidi, reflect.TypeOf(unicode.Yezidi), ""),
		NewVar("Yi", &unicode.Yi, reflect.TypeOf(unicode.Yi), ""),
		NewVar("Z", &unicode.Z, reflect.TypeOf(unicode.Z), ""),
		NewVar("Zanabazar_Square", &unicode.Zanabazar_Square, reflect.TypeOf(unicode.Zanabazar_Square), ""),
		NewVar("Zl", &unicode.Zl, reflect.TypeOf(unicode.Zl), ""),
		NewVar("Zp", &unicode.Zp, reflect.TypeOf(unicode.Zp), ""),
		NewVar("Zs", &unicode.Zs, reflect.TypeOf(unicode.Zs), ""),
	)
	AddPackage("encoding/xml", "xml",
		NewType("Attr", reflect.TypeOf(func(xml.Attr) {}).In(0), ""),
		NewType("CharData", reflect.TypeOf(func(xml.CharData) {}).In(0), ""),
		NewType("Comment", reflect.TypeOf(func(xml.Comment) {}).In(0), ""),
		NewFunction("CopyToken", xml.CopyToken, ""),
		NewType("Decoder", reflect.TypeOf(func(xml.Decoder) {}).In(0), ""),
		NewType("Directive", reflect.TypeOf(func(xml.Directive) {}).In(0), ""),
		NewType("Encoder", reflect.TypeOf(func(xml.Encoder) {}).In(0), ""),
		NewType("EndElement", reflect.TypeOf(func(xml.EndElement) {}).In(0), ""),
		NewFunction("Escape", xml.Escape, ""),
		NewFunction("EscapeText", xml.EscapeText, ""),
		NewVar("HTMLAutoClose", &xml.HTMLAutoClose, reflect.TypeOf(xml.HTMLAutoClose), ""),
		NewVar("HTMLEntity", &xml.HTMLEntity, reflect.TypeOf(xml.HTMLEntity), ""),
		NewConst("Header", xml.Header, ""),
		NewFunction("Marshal", xml.Marshal, ""),
		NewFunction("MarshalIndent", xml.MarshalIndent, ""),
		NewType("Marshaler", reflect.TypeOf(func(xml.Marshaler) {}).In(0), ""),
		NewType("MarshalerAttr", reflect.TypeOf(func(xml.MarshalerAttr) {}).In(0), ""),
		NewType("Name", reflect.TypeOf(func(xml.Name) {}).In(0), ""),
		NewFunction("NewDecoder", xml.NewDecoder, ""),
		NewFunction("NewEncoder", xml.NewEncoder, ""),
		NewFunction("NewTokenDecoder", xml.NewTokenDecoder, ""),
		NewType("ProcInst", reflect.TypeOf(func(xml.ProcInst) {}).In(0), ""),
		NewType("StartElement", reflect.TypeOf(func(xml.StartElement) {}).In(0), ""),
		NewType("SyntaxError", reflect.TypeOf(func(xml.SyntaxError) {}).In(0), ""),
		NewType("TagPathError", reflect.TypeOf(func(xml.TagPathError) {}).In(0), ""),
		NewType("Token", reflect.TypeOf(func(xml.Token) {}).In(0), ""),
		NewType("TokenReader", reflect.TypeOf(func(xml.TokenReader) {}).In(0), ""),
		NewFunction("Unmarshal", xml.Unmarshal, ""),
		NewType("UnmarshalError", reflect.TypeOf(func(xml.UnmarshalError) {}).In(0), ""),
		NewType("Unmarshaler", reflect.TypeOf(func(xml.Unmarshaler) {}).In(0), ""),
		NewType("UnmarshalerAttr", reflect.TypeOf(func(xml.UnmarshalerAttr) {}).In(0), ""),
		NewType("UnsupportedTypeError", reflect.TypeOf(func(xml.UnsupportedTypeError) {}).In(0), ""),
	)
	AddPackage("regexp", "regexp",
		NewFunction("Compile", regexp.Compile, ""),
		NewFunction("CompilePOSIX", regexp.CompilePOSIX, ""),
		NewFunction("Match", regexp.Match, ""),
		NewFunction("MatchReader", regexp.MatchReader, ""),
		NewFunction("MatchString", regexp.MatchString, ""),
		NewFunction("MustCompile", regexp.MustCompile, ""),
		NewFunction("MustCompilePOSIX", regexp.MustCompilePOSIX, ""),
		NewFunction("QuoteMeta", regexp.QuoteMeta, ""),
		NewType("Regexp", reflect.TypeOf(func(regexp.Regexp) {}).In(0), ""),
	)
	AddPackage("crypto/sha1", "sha1",
		NewConst("BlockSize", sha1.BlockSize, ""),
		NewFunction("New", sha1.New, ""),
		NewConst("Size", sha1.Size, ""),
		NewFunction("Sum", sha1.Sum, ""),
	)
	AddPackage("crypto/cipher", "cipher",
		NewType("AEAD", reflect.TypeOf(func(cipher.AEAD) {}).In(0), ""),
		NewType("Block", reflect.TypeOf(func(cipher.Block) {}).In(0), ""),
		NewType("BlockMode", reflect.TypeOf(func(cipher.BlockMode) {}).In(0), ""),
		NewFunction("NewCBCDecrypter", cipher.NewCBCDecrypter, ""),
		NewFunction("NewCBCEncrypter", cipher.NewCBCEncrypter, ""),
		NewFunction("NewCFBDecrypter", cipher.NewCFBDecrypter, ""),
		NewFunction("NewCFBEncrypter", cipher.NewCFBEncrypter, ""),
		NewFunction("NewCTR", cipher.NewCTR, ""),
		NewFunction("NewGCM", cipher.NewGCM, ""),
		NewFunction("NewGCMWithNonceSize", cipher.NewGCMWithNonceSize, ""),
		NewFunction("NewGCMWithTagSize", cipher.NewGCMWithTagSize, ""),
		NewFunction("NewOFB", cipher.NewOFB, ""),
		NewType("Stream", reflect.TypeOf(func(cipher.Stream) {}).In(0), ""),
		NewType("StreamReader", reflect.TypeOf(func(cipher.StreamReader) {}).In(0), ""),
		NewType("StreamWriter", reflect.TypeOf(func(cipher.StreamWriter) {}).In(0), ""),
	)
	AddPackage("crypto/tls", "tls",
		NewType("Certificate", reflect.TypeOf(func(tls.Certificate) {}).In(0), ""),
		NewType("CertificateRequestInfo", reflect.TypeOf(func(tls.CertificateRequestInfo) {}).In(0), ""),
		NewType("CipherSuite", reflect.TypeOf(func(tls.CipherSuite) {}).In(0), ""),
		NewFunction("CipherSuiteName", tls.CipherSuiteName, ""),
		NewFunction("CipherSuites", tls.CipherSuites, ""),
		NewFunction("Client", tls.Client, ""),
		NewType("ClientAuthType", reflect.TypeOf(func(tls.ClientAuthType) {}).In(0), ""),
		NewType("ClientHelloInfo", reflect.TypeOf(func(tls.ClientHelloInfo) {}).In(0), ""),
		NewType("ClientSessionCache", reflect.TypeOf(func(tls.ClientSessionCache) {}).In(0), ""),
		NewType("ClientSessionState", reflect.TypeOf(func(tls.ClientSessionState) {}).In(0), ""),
		NewType("Config", reflect.TypeOf(func(tls.Config) {}).In(0), ""),
		NewType("Conn", reflect.TypeOf(func(tls.Conn) {}).In(0), ""),
		NewType("ConnectionState", reflect.TypeOf(func(tls.ConnectionState) {}).In(0), ""),
		NewType("CurveID", reflect.TypeOf(func(tls.CurveID) {}).In(0), ""),
		NewConst("CurveP256", tls.CurveP256, ""),
		NewConst("CurveP384", tls.CurveP384, ""),
		NewConst("CurveP521", tls.CurveP521, ""),
		NewFunction("Dial", tls.Dial, ""),
		NewFunction("DialWithDialer", tls.DialWithDialer, ""),
		NewType("Dialer", reflect.TypeOf(func(tls.Dialer) {}).In(0), ""),
		NewConst("ECDSAWithP256AndSHA256", tls.ECDSAWithP256AndSHA256, ""),
		NewConst("ECDSAWithP384AndSHA384", tls.ECDSAWithP384AndSHA384, ""),
		NewConst("ECDSAWithP521AndSHA512", tls.ECDSAWithP521AndSHA512, ""),
		NewConst("ECDSAWithSHA1", tls.ECDSAWithSHA1, ""),
		NewConst("Ed25519", tls.Ed25519, ""),
		NewFunction("InsecureCipherSuites", tls.InsecureCipherSuites, ""),
		NewFunction("Listen", tls.Listen, ""),
		NewFunction("LoadX509KeyPair", tls.LoadX509KeyPair, ""),
		NewFunction("NewLRUClientSessionCache", tls.NewLRUClientSessionCache, ""),
		NewFunction("NewListener", tls.NewListener, ""),
		NewConst("NoClientCert", tls.NoClientCert, ""),
		NewConst("PKCS1WithSHA1", tls.PKCS1WithSHA1, ""),
		NewConst("PKCS1WithSHA256", tls.PKCS1WithSHA256, ""),
		NewConst("PKCS1WithSHA384", tls.PKCS1WithSHA384, ""),
		NewConst("PKCS1WithSHA512", tls.PKCS1WithSHA512, ""),
		NewConst("PSSWithSHA256", tls.PSSWithSHA256, ""),
		NewConst("PSSWithSHA384", tls.PSSWithSHA384, ""),
		NewConst("PSSWithSHA512", tls.PSSWithSHA512, ""),
		NewType("RecordHeaderError", reflect.TypeOf(func(tls.RecordHeaderError) {}).In(0), ""),
		NewConst("RenegotiateFreelyAsClient", tls.RenegotiateFreelyAsClient, ""),
		NewConst("RenegotiateNever", tls.RenegotiateNever, ""),
		NewConst("RenegotiateOnceAsClient", tls.RenegotiateOnceAsClient, ""),
		NewType("RenegotiationSupport", reflect.TypeOf(func(tls.RenegotiationSupport) {}).In(0), ""),
		NewConst("RequestClientCert", tls.RequestClientCert, ""),
		NewConst("RequireAndVerifyClientCert", tls.RequireAndVerifyClientCert, ""),
		NewConst("RequireAnyClientCert", tls.RequireAnyClientCert, ""),
		NewFunction("Server", tls.Server, ""),
		NewType("SignatureScheme", reflect.TypeOf(func(tls.SignatureScheme) {}).In(0), ""),
		NewConst("TLS_AES_128_GCM_SHA256", tls.TLS_AES_128_GCM_SHA256, ""),
		NewConst("TLS_AES_256_GCM_SHA384", tls.TLS_AES_256_GCM_SHA384, ""),
		NewConst("TLS_CHACHA20_POLY1305_SHA256", tls.TLS_CHACHA20_POLY1305_SHA256, ""),
		NewConst("TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA", tls.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA, ""),
		NewConst("TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256", tls.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256, ""),
		NewConst("TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256", tls.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256, ""),
		NewConst("TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA", tls.TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA, ""),
		NewConst("TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384", tls.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, ""),
		NewConst("TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305", tls.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305, ""),
		NewConst("TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256", tls.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256, ""),
		NewConst("TLS_ECDHE_ECDSA_WITH_RC4_128_SHA", tls.TLS_ECDHE_ECDSA_WITH_RC4_128_SHA, ""),
		NewConst("TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA", tls.TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA, ""),
		NewConst("TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA", tls.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, ""),
		NewConst("TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256", tls.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256, ""),
		NewConst("TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256", tls.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, ""),
		NewConst("TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA", tls.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, ""),
		NewConst("TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384", tls.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384, ""),
		NewConst("TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305", tls.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305, ""),
		NewConst("TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256", tls.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256, ""),
		NewConst("TLS_ECDHE_RSA_WITH_RC4_128_SHA", tls.TLS_ECDHE_RSA_WITH_RC4_128_SHA, ""),
		NewConst("TLS_FALLBACK_SCSV", tls.TLS_FALLBACK_SCSV, ""),
		NewConst("TLS_RSA_WITH_3DES_EDE_CBC_SHA", tls.TLS_RSA_WITH_3DES_EDE_CBC_SHA, ""),
		NewConst("TLS_RSA_WITH_AES_128_CBC_SHA", tls.TLS_RSA_WITH_AES_128_CBC_SHA, ""),
		NewConst("TLS_RSA_WITH_AES_128_CBC_SHA256", tls.TLS_RSA_WITH_AES_128_CBC_SHA256, ""),
		NewConst("TLS_RSA_WITH_AES_128_GCM_SHA256", tls.TLS_RSA_WITH_AES_128_GCM_SHA256, ""),
		NewConst("TLS_RSA_WITH_AES_256_CBC_SHA", tls.TLS_RSA_WITH_AES_256_CBC_SHA, ""),
		NewConst("TLS_RSA_WITH_AES_256_GCM_SHA384", tls.TLS_RSA_WITH_AES_256_GCM_SHA384, ""),
		NewConst("TLS_RSA_WITH_RC4_128_SHA", tls.TLS_RSA_WITH_RC4_128_SHA, ""),
		NewConst("VerifyClientCertIfGiven", tls.VerifyClientCertIfGiven, ""),
		NewConst("VersionSSL30", tls.VersionSSL30, ""),
		NewConst("VersionTLS10", tls.VersionTLS10, ""),
		NewConst("VersionTLS11", tls.VersionTLS11, ""),
		NewConst("VersionTLS12", tls.VersionTLS12, ""),
		NewConst("VersionTLS13", tls.VersionTLS13, ""),
		NewConst("X25519", tls.X25519, ""),
		NewFunction("X509KeyPair", tls.X509KeyPair, ""),
	)
	AddPackage("container/heap", "heap",
		NewFunction("Fix", heap.Fix, ""),
		NewFunction("Init", heap.Init, ""),
		NewType("Interface", reflect.TypeOf(func(heap.Interface) {}).In(0), ""),
		NewFunction("Pop", heap.Pop, ""),
		NewFunction("Push", heap.Push, ""),
		NewFunction("Remove", heap.Remove, ""),
	)
	AddPackage("crypto/md5", "md5",
		NewConst("BlockSize", md5.BlockSize, ""),
		NewFunction("New", md5.New, ""),
		NewConst("Size", md5.Size, ""),
		NewFunction("Sum", md5.Sum, ""),
	)
}

func objectDecl(object types.Object) string {
	name := fmt.Sprintf("%s.%s", object.Pkg().Name(), object.Name())

	switch object.(type) {
	case *types.TypeName:
		return fmt.Sprintf(`NewType("%s", reflect.TypeOf(func(%s){}).In(0), "%s")`, object.Name(), name, "")
	case *types.Const:
		if object.Name() == "MaxUint64" {
			name = fmt.Sprintf("uint(%s)", name)
		}
		return fmt.Sprintf(`NewConst("%s", %s, "%s")`, object.Name(), name, "")
	case *types.Var:
		switch object.Type().Underlying().(type) {
		case *types.Interface:
			return fmt.Sprintf(`NewVar("%s", &%s, reflect.TypeOf(func (%s){}).In(0), "%s")`, object.Name(), name, trimVendor(object.Type().String()), "")
		default:
			return fmt.Sprintf(`NewVar("%s", &%s, reflect.TypeOf(%s), "%s")`, object.Name(), name, name, "")
		}

	case *types.Func:
		return fmt.Sprintf(`NewFunction("%s", %s, "%s")`, object.Name(), name, "")
	}
	return ""
}

func trimVendor(src string) string {
	if i := strings.LastIndex(src, `vendor/`); i >= 0 {
		return src[i+7:]
	}
	return src
}

func packageImport() error {
	builder := strings.Builder{}
	preImports := ""
	for path, v := range importPkgs {
		for _, v1 := range v {
			preImports = preImports + `"` + v1 + `"` + "\n"
		}
		preImports = preImports + `"` + path + `"` + "\n"
		pkg, err := importer.ForCompiler(token.NewFileSet(), "source", nil).Import(path)
		if err != nil {
			return err
		}
		pkgPath := trimVendor(pkg.Path())
		fmt.Println("pkg.Path(): ", pkg.Path(), ", pkgPath: ", pkgPath)
		scope := pkg.Scope()
		builder.WriteString(fmt.Sprintf(`AddPackage("%s", "%s",`+"\n", path, pkg.Name()))
		for _, declName := range pkg.Scope().Names() {
			if ast.IsExported(declName) {
				obj := scope.Lookup(declName)
				builder.WriteString(strings.Replace(objectDecl(obj), path, pkg.Name(), 1) + ",\n")
			}
		}
		builder.WriteString(`)` + "\n")
	}
	src := `package internal
	import (` + preImports + `
		"github.com/goccy/go-reflect"
	)
	var _ = reflect.Int
	func init() { ` + builder.String() + `}`
	code, err := format.Source([]byte(src))
	if err != nil {
		code = []byte(src)
		println("format: ", err.Error())
	}
	fmt.Println("code: ", string(code))
	return nil
}
